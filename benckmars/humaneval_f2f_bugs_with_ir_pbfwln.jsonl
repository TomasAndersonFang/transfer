{"bug_id": "FIB", "buggy_code": "1     public static int fib(int n) {\n2         return fib(n - 1) + fib(n - 2);\n3     }\n", "fixed_code": "    public static int fib(int n) {\n        if (n == 0 || n == 1)\n            return n;\n        return fib(n - 1) + fib(n - 2);\n    }\n"}
{"bug_id": "SAME_CHARS", "buggy_code": "1     public static boolean same_chars(String s0, String s1) {\n2         ArrayList<Character> set0 = new ArrayList<Character>();\n3         ArrayList<Character> set1 = new ArrayList<Character>();\n4 \n5         for (char c0 : s0.toCharArray()) {\n6             set0.add(c0);\n7         }\n8         for (char c1 : s1.toCharArray()) {\n9             set1.add(c1);\n10         }\n11         return set0.equals(set1);\n12     }\n", "fixed_code": "    public static boolean same_chars(String s0, String s1) {\n        HashSet<Character> set0 = new HashSet<Character>();\n        HashSet<Character> set1 = new HashSet<Character>();\n\n        for (char c0 : s0.toCharArray()) {\n            set0.add(c0);\n        }\n        for (char c1 : s1.toCharArray()) {\n            set1.add(c1);\n        }\n        return set0.equals(set1);\n    }\n"}
{"bug_id": "DECODE_CYCLIC", "buggy_code": "1             String encode_cyclic(String s) {\n2                 ArrayList<String> groups = new ArrayList<String>();\n3 \n4                 for (int i = 0; i < s.length(); i += 3){\n5                     groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n6                 }\n7                 int remain = s.length() % 3;\n8                 \n9                 String result = \"\";\n10                 for (String group : groups){\n11                     result += group.substring(1) + group.substring(0, 1);\n12                 }\n13 \n14                 if (remain > 0){\n15                     result += s.substring(s.length() - remain);\n16                 }\n17 \n18                 return result;\n19             }\n", "fixed_code": "            String encode_cyclic(String s) {\n                ArrayList<String> groups = new ArrayList<String>();\n\n                for (int i = 0; i < s.length() - s.length() % 3; i += 3){\n                    groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n                }\n                int remain = s.length() % 3;\n                \n                String result = \"\";\n                for (String group : groups){\n                    result += group.substring(1) + group.substring(0, 1);\n                }\n\n                if (remain > 0){\n                    result += s.substring(s.length() - remain);\n                }\n\n                return result;\n            }\n"}
{"bug_id": "SORTED_LIST_SUM", "buggy_code": "1     public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n2         ArrayList<String> result = new ArrayList<String>();\n3         for (String str : lst) {\n4             if (str.length() % 2 == 1) continue;\n5             result.add(str);\n6         }\n7 \n8         Collections.sort(\n9             result,\n10             (s1, s2) -> s1.length() - s2.length()\n11         );\n12 \n13         return result;\n14     }\n", "fixed_code": "    public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<String>();\n        for (String str : lst) {\n            if (str.length() % 2 == 1) continue;\n            result.add(str);\n        }\n\n        Collections.sort(\n            result,\n            (s1, s2) -> {\n                if (s1.length() == s2.length()) return s1.compareTo(s2);\n                return s1.length() - s2.length();\n            }\n        );\n\n        return result;\n    }\n"}
{"bug_id": "FRUIT_DISTRIBUTION", "buggy_code": "1     public static int fruit_distribution(String s, int n) {\n2         int result = n;\n3 \n4         for (String str : s.split(\" \")) {\n5             int cnt = Integer.parseInt(str);\n6             result -= cnt;\n7         }\n8         return result;\n9     }\n", "fixed_code": "    public static int fruit_distribution(String s, int n) {\n        int result = n;\n\n        for (String str : s.split(\" \")) {\n            try {\n                int cnt = Integer.parseInt(str);\n                result -= cnt;\n            } catch (Exception e) {\n                continue;\n            }\n        }\n        return result;\n    }\n"}
{"bug_id": "IS_NESTED", "buggy_code": "1     public static boolean is_nested(String brackets) {\n2         ArrayList<Integer> opening_brackets = new ArrayList<>();\n3         ArrayList<Integer> closing_brackets = new ArrayList<>();\n4         for(int i = 0; i < brackets.length(); i++) {\n5             if(brackets.charAt(i) == '[') opening_brackets.add(i);\n6             else closing_brackets.add(i);\n7         }\n8         Collections.reverse(opening_brackets);\n9         int cnt = 0, i = 0, l = opening_brackets.size();\n10         for(int idx : closing_brackets) {\n11             if(i < l || idx >= opening_brackets.get(i)) {\n12                 i++;\n13                 cnt++;\n14             }\n15         }\n16         return cnt >= 2;\n17     }\n", "fixed_code": "    public static boolean is_nested(String brackets) {\n        ArrayList<Integer> opening_brackets = new ArrayList<>();\n        ArrayList<Integer> closing_brackets = new ArrayList<>();\n        for(int i = 0; i < brackets.length(); i++) {\n            if(brackets.charAt(i) == '[') opening_brackets.add(i);\n            else closing_brackets.add(i);\n        }\n        Collections.reverse(closing_brackets);\n        int cnt = 0, i = 0, l = closing_brackets.size();\n        for(int idx : opening_brackets) {\n            if(i < l && idx < closing_brackets.get(i)) {\n                i++;\n                cnt++;\n            }\n        }\n        return cnt >= 2;\n    }\n"}
{"bug_id": "MATCH_PARENS", "buggy_code": "1     public static boolean check(String s) {\n2         int val = 0;\n3         for(int i = 0; i < s.length(); i++) {\n4             if(s.charAt(i) == '(') val--;\n5             else val++;\n6             if(val < 0) return false;\n7         }\n8         return val == 0;\n9     }\n", "fixed_code": "    public static boolean check(String s) {\n        int val = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == '(') val++;\n            else val--;\n            if(val < 0) return false;\n        }\n        return val == 0;\n    }\n"}
{"bug_id": "DECIMAL_TO_BINARY", "buggy_code": "1     public static String decimal_to_binary(int decimal) {\n2         String result = Integer.toHexString(decimal);\n3         return \"db\" + result + \"db\";\n4     }\n", "fixed_code": "    public static String decimal_to_binary(int decimal) {\n        String result = Integer.toBinaryString(decimal);\n        return \"db\" + result + \"db\";\n    }\n"}
{"bug_id": "ALL_PREFIXES", "buggy_code": "1     public static List<String> all_prefixes(String string){\n2         List<String> result = new ArrayList<String>();\n3 \n4         for (int i = 0; i < string.length(); i += 1){\n5             result.add(string.substring(i + 1));\n6         }\n7 \n8         return result;\n9     }\n", "fixed_code": "    public static List<String> all_prefixes(String string){\n        List<String> result = new ArrayList<String>();\n\n        for (int i = 0; i < string.length(); i += 1){\n            result.add(string.substring(0, i + 1));\n        }\n\n        return result;\n    }\n"}
{"bug_id": "MEAN_ABSOLUTE_DEVIATION", "buggy_code": "1     public static double mean_absolute_deviation(List<Double> numbers) {\n2         double sum = 0.;\n3         for (Double number : numbers){\n4             sum += number;\n5         }\n6         double mean = sum / numbers.size();\n7         double deviation_sum = 0.;\n8         for (Double number : numbers){\n9             deviation_sum += (number - mean) * (number - mean);\n10         }\n11         return deviation_sum / numbers.size();\n12     }\n", "fixed_code": "    public static double mean_absolute_deviation(List<Double> numbers) {\n        double sum = 0.;\n        for (Double number : numbers){\n            sum += number;\n        }\n        double mean = sum / numbers.size();\n        double deviation_sum = 0.;\n        for (Double number : numbers){\n            deviation_sum += Math.abs(number - mean);\n        }\n        return deviation_sum / numbers.size();\n    }\n"}
{"bug_id": "NEXT_SMALLEST", "buggy_code": "1     public static Integer next_smallest(int[] lst) {\n2         List<Integer> numbers = new ArrayList<Integer>();\n3         for (Integer n : lst)\n4             numbers.add(n);\n5         Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n6         Arrays.sort(no_duplicate);\n7 \n8         if (no_duplicate.length < 2)\n9             return null;\n10         return no_duplicate[1];\n11     }\n", "fixed_code": "    public static Integer next_smallest(int[] lst) {\n        HashSet<Integer> numbers = new HashSet<Integer>();\n        for (Integer n : lst)\n            numbers.add(n);\n        Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n        Arrays.sort(no_duplicate);\n\n        if (no_duplicate.length < 2)\n            return null;\n        return no_duplicate[1];\n    }\n"}
{"bug_id": "FILE_NAME_CHECK", "buggy_code": "1     public static String file_name_check(String file_name) {\n2         String[] lst = file_name.split(\"\\\\.\");\n3 \n4         if (lst.length != 2)\n5             return \"No\";\n6         if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n7             return \"No\";\n8         if (lst[0].length() == 0)\n9             return \"No\";\n10         if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n11             return \"No\";\n12         int digit_cnt = 0;\n13         for (char c : file_name.toCharArray()){\n14             if ('0' <= c && c <= '9')\n15                 digit_cnt += 1;\n16         }\n17         if (digit_cnt > 3)  return \"No\";\n18         return \"Yes\";\n19     }\n", "fixed_code": "    public static String file_name_check(String file_name) {\n        String[] lst = file_name.split(\"\\\\.\");\n\n        if (lst.length != 2)\n            return \"No\";\n        if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n            return \"No\";\n        if (lst[0].length() == 0)\n            return \"No\";\n        if (! (('a' <= lst[0].charAt(0) && lst[0].charAt(0) <= 'z') || ('A' <= lst[0].charAt(0) && lst[0].charAt(0) <= 'Z')))\n            return \"No\";\n        int digit_cnt = 0;\n        for (char c : file_name.toCharArray()){\n            if ('0' <= c && c <= '9')\n                digit_cnt += 1;\n        }\n        if (digit_cnt > 3)  return \"No\";\n        return \"Yes\";\n    }\n"}
{"bug_id": "FIND_ZERO", "buggy_code": "1     public static double find_zero(List<Double> xs){\n2         double begin = -1.;\n3         double end = 1.;\n4 \n5         while (poly(xs, begin) * poly(xs, end) > 0) {\n6             begin *= 2.;\n7             end *= 2.;\n8         }\n9         while (end - begin > 1e-10) {\n10             double center = (begin + end) / 2.;\n11             \n12             if (poly(xs, begin) * poly(xs, end) < 0) {\n13                 begin = center;\n14             } else {\n15                 end = center;\n16             }\n17         }\n18         return begin;\n19     }\n", "fixed_code": "    public static double find_zero(List<Double> xs){\n        double begin = -1.;\n        double end = 1.;\n\n        while (poly(xs, begin) * poly(xs, end) > 0) {\n            begin *= 2.;\n            end *= 2.;\n        }\n        while (end - begin > 1e-10) {\n            double center = (begin + end) / 2.;\n            \n            if (poly(xs, center) * poly(xs, begin) > 0){\n                begin = center;\n            } else {\n                end = center;\n            }\n        }\n        return begin;\n    }\n"}
{"bug_id": "SMALLEST_CHANGE", "buggy_code": "1     public static int smallest_change(int[] arr) {\n2         int result = 0;\n3         for (int i = 0; i < arr.length; i += 1) {\n4             if (arr[i] != arr[arr.length - i])\n5                 result += 1;\n6         }\n7 \n8         return result;\n9     }\n", "fixed_code": "    public static int smallest_change(int[] arr) {\n        int result = 0;\n        for (int i = 0; i < arr.length / 2; i += 1) {\n            if (arr[i] != arr[arr.length - i - 1])\n                result += 1;\n        }\n\n        return result;\n    }\n"}
{"bug_id": "ADD_ELEMENTS", "buggy_code": "1     public static int add_elements(ArrayList<Integer> arr, int k) {\n2         int result = 0;\n3         for(int i = 0; i < k; i++) {\n4             if(Integer.toString(arr.get(i)).length() >= 2) {\n5                 result -= arr.get(i);\n6             }\n7         }\n8         return result;\n9     }\n", "fixed_code": "    public static int add_elements(ArrayList<Integer> arr, int k) {\n        int result = 0;\n        for(int i = 0; i < k; i++) {\n            if(Integer.toString(arr.get(i)).length() <= 2) {\n                result += arr.get(i);\n            }\n        }\n        return result;\n    }\n"}
{"bug_id": "ANY_INT", "buggy_code": "1     public static boolean any_int(double x, double y, double z) {\n2         if ((int)x == x && (int)y == y) {\n3             if (x + y == z || x + z == y)\n4                 return true;\n5         }\n6         return false;\n7     }\n", "fixed_code": "    public static boolean any_int(double x, double y, double z) {\n        if ((int)x == x && (int)y == y && (int)z == z) {\n            if (x + y == z || x + z == y || y + z == x)\n                return true;\n        }\n        return false;\n    }\n"}
{"bug_id": "HOW_MANY_TIMES", "buggy_code": "1     public static int how_many_times(String string, String substring) {\n2         int times = 0;\n3         for (int i = 0; i < string.length() - substring.length(); i += 1) {\n4             if (string.substring(i, i + substring.length()).equals(substring)){\n5                 times += 1;\n6             }\n7         }\n8         return times;\n9     }\n", "fixed_code": "    public static int how_many_times(String string, String substring) {\n        int times = 0;\n        for (int i = 0; i < string.length() - substring.length() + 1; i += 1) {\n            if (string.substring(i, i + substring.length()).equals(substring)){\n                times += 1;\n            }\n        }\n        return times;\n    }\n"}
{"bug_id": "ROLLING_MAX", "buggy_code": "1     public static List<Integer> rolling_max(List<Integer> numbers) {\n2         List<Integer> result = new ArrayList<Integer>();\n3         Integer running_max = null;\n4 \n5         for (Integer n : numbers){\n6             running_max = Math.max(running_max, n);\n7             result.add(running_max);\n8         }\n9         return result;\n10     }\n", "fixed_code": "    public static List<Integer> rolling_max(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        Integer running_max = null;\n\n        for (Integer n : numbers){\n            if (running_max == null){\n                running_max = n;\n            }\n            else{\n                running_max = Math.max(running_max, n);\n            }\n            result.add(running_max);\n        }\n        return result;\n    }\n"}
{"bug_id": "SEARCH", "buggy_code": "1     public static int search(int[] lst) {\n2         int max = -1;\n3         for (Integer i : lst) {\n4             if (i > max)\n5                 max = i;\n6         }\n7 \n8         int result = -1;\n9         int[] frq = new int[max];\n10         for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n11         for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n12         \n13         return result;\n14     }\n", "fixed_code": "    public static int search(int[] lst) {\n        int max = -1;\n        for (Integer i : lst) {\n            if (i > max)\n                max = i;\n        }\n\n        int result = -1;\n        int[] frq = new int[max + 1];\n        for (int i = 0; i < lst.length; i += 1)  frq[lst[i]] += 1;\n        for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i && frq[i] > 0) result = i;\n        \n        return result;\n    }\n"}
{"bug_id": "EVEN_ODD_PALINDROME", "buggy_code": "1     public static ArrayList<Integer> even_odd_palindrome(int n) {\n2         int even_palindrome_count = 0, odd_palindrome_count = 0;\n3         for(int i = 1; i <= n; i++) {\n4             if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n5             else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n6         }\n7         ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n8         return result;\n9     }\n", "fixed_code": "    public static ArrayList<Integer> even_odd_palindrome(int n) {\n        int even_palindrome_count = 0, odd_palindrome_count = 0;\n        for(int i = 1; i <= n; i++) {\n            if((i % 2) == 1 && is_palindrome(i)) odd_palindrome_count++;\n            else if((i % 2) == 0 && is_palindrome(i)) even_palindrome_count++;\n        }\n        ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n        return result;\n    }\n"}
{"bug_id": "STRONGEST_EXTENSION", "buggy_code": "1     public static String strongest_extension(String class_name, String[] extensions) {\n2         String strong = null;\n3         int val = Integer.MIN_VALUE;\n4 \n5         for (String s : extensions) {\n6             int CAP = 0;\n7             int SM = 0;\n8             for (char c : s.toCharArray()) {\n9                 if (Character.toUpperCase(c) == c) SM += 1;\n10                 if (Character.toLowerCase(c) == c) CAP += 1;\n11             }\n12             val = CAP - SM;\n13             strong = s;\n14         }\n15         return class_name + \".\" + strong;\n16     }\n", "fixed_code": "    public static String strongest_extension(String class_name, String[] extensions) {\n        String strong = null;\n        int val = Integer.MIN_VALUE;\n\n        for (String s : extensions) {\n            int CAP = 0;\n            int SM = 0;\n            for (char c : s.toCharArray()) {\n                if (Character.toUpperCase(c) == c) CAP += 1;\n                if (Character.toLowerCase(c) == c) SM += 1;\n            }\n            if (CAP - SM > val) {\n                val = CAP - SM;\n                strong = s;\n            }\n        }\n        return class_name + \".\" + strong;\n    }\n"}
{"bug_id": "DECODE_SHIFT", "buggy_code": "1     public static String decode_shift(String string) {\n2         StringBuilder sb = new StringBuilder();\n3         for (char c : string.toCharArray()) {\n4             c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n5             sb.append(c);\n6         }\n7         return sb.toString();\n8     }\n", "fixed_code": "    public static String decode_shift(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            c = (char)((((int) c + 21 - (int)('a')) % 26) + (int)('a'));\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n"}
{"bug_id": "BF", "buggy_code": "1     public static ArrayList<String> bf(String planet1, String planet2) {\n2         ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n3             \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n4         ));\n5 \n6         ArrayList<String> result = new ArrayList<String>();\n7         if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n8             return result;\n9         int planet1_index = planet_names.indexOf(planet1);\n10         int planet2_index = planet_names.indexOf(planet2);\n11         for (int i = planet1_index; i < planet2_index; i += 1)\n12             result.add(planet_names.get(i));\n13         return result;\n14     }\n", "fixed_code": "    public static ArrayList<String> bf(String planet1, String planet2) {\n        ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n            \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n        ));\n\n        ArrayList<String> result = new ArrayList<String>();\n        if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n            return result;\n        int planet1_index = planet_names.indexOf(planet1);\n        int planet2_index = planet_names.indexOf(planet2);\n        if (planet1_index < planet2_index) {\n            for (int i = planet1_index + 1; i < planet2_index; i += 1)\n                result.add(planet_names.get(i));\n        } else {\n            for (int i = planet2_index + 1; i < planet1_index; i += 1)\n                result.add(planet_names.get(i));\n        }\n        return result;\n    }\n"}
{"bug_id": "SUM_PRODUCT", "buggy_code": "1     public static Integer[] sum_product(List<Integer> numbers) {\n2         Integer[] result = new Integer[2];\n3         for (Integer n : numbers){\n4             result[0] += n;\n5             result[1] *= n;\n6         }\n7         return result;\n8     }\n", "fixed_code": "    public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] result = new Integer[]{0, 1};\n        for (Integer n : numbers){\n            result[0] += n;\n            result[1] *= n;\n        }\n        return result;\n    }\n"}
{"bug_id": "COMPARE_ONE", "buggy_code": "1     public static Object compare_one(Object a, Object b) {\n2         double temp_a = 0, temp_b = 0;\n3         if(a instanceof String) {\n4             String temp_a_string = a.toString();\n5             temp_a_string = temp_a_string.replace(',', '.');\n6             temp_a = Double.parseDouble(temp_a_string);\n7         }\n8         if(b instanceof String) {\n9             String temp_b_string = b.toString();\n10             temp_b_string = temp_b_string.replace(',', '.');\n11             temp_b = Double.parseDouble(temp_b_string);\n12         }\n13         if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n14         if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n15         if(a instanceof Integer) temp_a = (Double) a;\n16         if(b instanceof Integer) temp_b = (Double) b;\n17         if(temp_a == temp_b) return null;\n18         if(temp_a > temp_b) return a;\n19         else return b;\n20     }\n", "fixed_code": "    public static Object compare_one(Object a, Object b) {\n        double temp_a = 0, temp_b = 0;\n        if(a instanceof String) {\n            String temp_a_string = a.toString();\n            temp_a_string = temp_a_string.replace(',', '.');\n            temp_a = Double.parseDouble(temp_a_string);\n        }\n        if(b instanceof String) {\n            String temp_b_string = b.toString();\n            temp_b_string = temp_b_string.replace(',', '.');\n            temp_b = Double.parseDouble(temp_b_string);\n        }\n        if(a instanceof Double) temp_a = (Double) a;\n        if(b instanceof Double) temp_b = (Double) b;\n        if(a instanceof Integer) temp_a = ((Integer) a).doubleValue();\n        if(b instanceof Integer) temp_b = ((Integer) b).doubleValue();\n        if(temp_a == temp_b) return null;\n        if(temp_a > temp_b) return a;\n        else return b;\n    }\n"}
{"bug_id": "CLOSEST_INTEGER", "buggy_code": "1     public static int closest_integer(String value) {\n2         if (value.indexOf('.') >= 0) {\n3             while (value.charAt(value.length() - 1) == '0')\n4                 value = value.substring(0, value.length() - 1);\n5         }\n6 \n7         double num = Double.parseDouble(value);\n8         int result = 0;\n9         if (value.substring(value.length() - 2).equals(\".5\")) {\n10             result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n11         } else if (value.length() > 0){\n12             result = (int)Math.round(num);\n13         }\n14 \n15         return result;\n16     }\n", "fixed_code": "    public static int closest_integer(String value) {\n        if (value.indexOf('.') >= 0) {\n            while (value.charAt(value.length() - 1) == '0')\n                value = value.substring(0, value.length() - 1);\n        }\n\n        double num = Double.parseDouble(value);\n        int result = 0;\n        if (value.length() >= 2 && value.substring(value.length() - 2).equals(\".5\")) {\n            result = num > 0 ? (int)Math.ceil(num) : (int)Math.floor(num);\n        } else if (value.length() > 0){\n            result = (int)Math.round(num);\n        }\n\n        return result;\n    }\n"}
{"bug_id": "SORT_ARRAY", "buggy_code": "1     public static int[] sort_array(int[] array) {\n2         if (array.length == 0)\n3             return array;\n4         Arrays.sort(array);\n5         if ((array[0] + array[array.length - 1]) % 2 == 1)\n6             return array;\n7         else {\n8             for (int i = 0; i < array.length / 2; i += 1){\n9                 array[i] = array[array.length - i - 1];\n10                 array[array.length - i - 1] = array[i];\n11             }\n12             return array;\n13         }\n14     }\n", "fixed_code": "    public static int[] sort_array(int[] array) {\n        if (array.length == 0)\n            return array;\n        Arrays.sort(array);\n        if ((array[0] + array[array.length - 1]) % 2 == 1)\n            return array;\n        else {\n            for (int i = 0; i < array.length / 2; i += 1){\n                int tmp = array[i];\n                array[i] = array[array.length - i - 1];\n                array[array.length - i - 1] = tmp;\n            }\n            return array;\n        }\n    }\n"}
{"bug_id": "COUNT_UPPER", "buggy_code": "1     public static int count_upper(String s) {\n2         int count = 0;\n3         for (int i = 0; i < s.length(); i += 2) {\n4             char c = s.charAt(i);\n5             if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u')\n6                 count += 1;\n7         }\n8         return count;\n9     }\n", "fixed_code": "    public static int count_upper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            char c = s.charAt(i);\n            if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n                count += 1;\n        }\n        return count;\n    }\n"}
{"bug_id": "DOUBLE_THE_DIFFERENCE", "buggy_code": "1     public static int double_the_difference(double[] lst) {\n2         int result = 0;\n3         for (Double d : lst) {\n4             if ((int) d.doubleValue() == d) {\n5                 int d_int = (int) d.doubleValue();\n6                 if (d_int % 2 == 1 && d_int >= 0) {\n7                     result += d_int;\n8                 }\n9             }\n10         }\n11         return result;\n12     }\n", "fixed_code": "    public static int double_the_difference(double[] lst) {\n        int result = 0;\n        for (Double d : lst) {\n            if ((int) d.doubleValue() == d) {\n                int d_int = (int) d.doubleValue();\n                if (d_int % 2 == 1 && d_int >= 0) {\n                    result += d_int * d_int;\n                }\n            }\n        }\n        return result;\n    }\n"}
{"bug_id": "BELOW_THRESHOLD", "buggy_code": "1     public static boolean below_threshold(int[] l, int t) {\n2         for (int i = 0; i < l.length; i += 1) {\n3             if (l[i] <= t)\n4                 return true;\n5         }\n6         return false;\n7     }\n", "fixed_code": "    public static boolean below_threshold(int[] l, int t) {\n        for (int i = 0; i < l.length; i += 1) {\n            if (l[i] >= t)\n                return false;\n        }\n        return true;\n    }\n"}
{"bug_id": "FIND_CLOSEST_ELEMENTS", "buggy_code": "1     public static double[] find_closest_elements(double[] numbers) {\n2         double[] result = new double[2];\n3 \n4         double distance = Double.MAX_VALUE;\n5         for (int i = 0; i < numbers.length; i += 1){\n6             for (int j = 0; j < numbers.length; j += 1){\n7                 double new_distance = Math.abs(numbers[i] - numbers[j]);\n8                 if (new_distance < distance){\n9                     distance = new_distance;\n10                     if (numbers[i] < numbers[j]){\n11                         result[0] = numbers[i];\n12                         result[1] = numbers[j];\n13                     } else{\n14                         result[0] = numbers[j];\n15                         result[1] = numbers[i];\n16                     }\n17                 }\n18             }\n19         }\n20         return result;\n21     }\n", "fixed_code": "    public static double[] find_closest_elements(double[] numbers) {\n        double[] result = new double[2];\n\n        double distance = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.length; i += 1){\n            for (int j = i + 1; j < numbers.length; j += 1){\n                double new_distance = Math.abs(numbers[i] - numbers[j]);\n                if (new_distance < distance){\n                    distance = new_distance;\n                    if (numbers[i] < numbers[j]){\n                        result[0] = numbers[i];\n                        result[1] = numbers[j];\n                    } else{\n                        result[0] = numbers[j];\n                        result[1] = numbers[i];\n                    }\n                }\n            }\n        }\n        return result;\n    }\n"}
{"bug_id": "FLIP_CASE", "buggy_code": "1     public static String flip_case(String string) {\n2         char[] char_list = string.toCharArray();\n3         \n4         for (int i = 0; i < char_list.length; i += 1){\n5             char c = char_list[i];\n6             if (Character.isLowerCase(c)) {\n7                 char_list[i] = Character.toLowerCase(c);\n8             }\n9             else {\n10                 char_list[i] = Character.toUpperCase(c);\n11             }\n12         }\n13         return new String(char_list);\n14     }\n", "fixed_code": "    public static String flip_case(String string) {\n        char[] char_list = string.toCharArray();\n        \n        for (int i = 0; i < char_list.length; i += 1){\n            char c = char_list[i];\n            if (Character.isLowerCase(c)) {\n                char_list[i] = Character.toUpperCase(c);\n            }\n            else {\n                char_list[i] = Character.toLowerCase(c);\n            }\n        }\n        return new String(char_list);\n    }\n"}
{"bug_id": "LONGEST", "buggy_code": "1     public static String longest(List<String> strings){\n2         int maxlen = 0;\n3         for (String string : strings){\n4             if (strings.size() > string.length()){\n5                 maxlen = strings.size();\n6             }\n7         }\n8         for (String string : strings){\n9             if (string.length() == maxlen){\n10                 return string;\n11             }\n12         }\n13         return null;\n14     }\n", "fixed_code": "    public static String longest(List<String> strings){\n        int maxlen = 0;\n        for (String string : strings){\n            if (string.length() > maxlen){\n                maxlen = string.length();\n            }\n        }\n        for (String string : strings){\n            if (string.length() == maxlen){\n                return string;\n            }\n        }\n        return null;\n    }\n"}
{"bug_id": "SPLIT_WORDS", "buggy_code": "1     public static String[] split_words(String txt) {\n2         if(txt.contains(\" \")) {\n3             return txt.split(\" \");\n4         } else if(txt.contains(\",\")) {\n5             return txt.split(\",\");\n6         } else {\n7             int count = 0;\n8             for(int i = 0; i < txt.length(); i++) {\n9                 char curr = txt.charAt(i);\n10                 if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n11             }\n12             String[] result = {Integer.toString(count)};\n13             return result;\n14         }\n15     }\n", "fixed_code": "    public static String[] split_words(String txt) {\n        if(txt.contains(\" \")) {\n            return txt.split(\" \");\n        } else if(txt.contains(\",\")) {\n            return txt.split(\",\");\n        } else {\n            int count = 0;\n            for(int i = 0; i < txt.length(); i++) {\n                char curr = txt.charAt(i);\n                if(Character.isLowerCase(curr) && ((curr - 'a') % 2) == 1) count++;\n            }\n            String[] result = {Integer.toString(count)};\n            return result;\n        }\n    }\n"}
{"bug_id": "CYCPATTERN_CHECK", "buggy_code": "1     public static boolean cycpattern_check(String a, String b) {\n2         int l = b.length();\n3         String pat = b;\n4         for (int i = 0; i < a.length(); i += 1) {\n5             for (int j = 0; j < l; j += 1) {\n6                 if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n7             }\n8         }\n9         return false;\n10     }\n", "fixed_code": "    public static boolean cycpattern_check(String a, String b) {\n        int l = b.length();\n        String pat = b + b;\n        for (int i = 0; i < a.length() - l + 1; i += 1) {\n            for (int j = 0; j < l + 1; j += 1) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n            }\n        }\n        return false;\n    }\n"}
{"bug_id": "TRIPLES_SUM_TO_ZERO", "buggy_code": "1     public static boolean triples_sum_to_zero(int[] numbers) {\n2         for (int i = 0; i < numbers.length; i += 1) {\n3             for (int j = i; j < numbers.length; j += 1) {\n4                 for (int k = j; k < numbers.length; k += 1) {\n5                     if (numbers[i] + numbers[j] + numbers[k] == 0)\n6                         return true;\n7                 }\n8             }\n9         }\n10         return false;\n11     }\n", "fixed_code": "    public static boolean triples_sum_to_zero(int[] numbers) {\n        for (int i = 0; i < numbers.length; i += 1) {\n            for (int j = i + 1; j < numbers.length; j += 1) {\n                for (int k = j + 1; k < numbers.length; k += 1) {\n                    if (numbers[i] + numbers[j] + numbers[k] == 0)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n"}
{"bug_id": "SUM_TO_N", "buggy_code": "1     public static int sum_to_n(int n) {\n2         return (n + 1) * (n / 2);\n3     }\n", "fixed_code": "    public static int sum_to_n(int n) {\n        return (n + 1) * n / 2;\n    }\n"}
{"bug_id": "IS_PALINDROME", "buggy_code": "1     public static boolean is_palindrome(String text) {\n2         for (int i = 0; i < text.length(); i += 1){\n3             if (text.charAt(i) == text.charAt(text.length() - i))\n4                 return true;\n5         }\n6         return false;\n7     }\n", "fixed_code": "    public static boolean is_palindrome(String text) {\n        for (int i = 0; i < text.length(); i += 1){\n            if (text.charAt(i) != text.charAt(text.length() - i - 1))\n                return false;\n        }\n        return true;\n    }\n"}
{"bug_id": "IS_HAPPY", "buggy_code": "1     public static boolean is_happy(String s) {\n2         if (s.length() < 3)\n3             return false;\n4         for (int i = 0; i < s.length() - 2; i += 1) {\n5             if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n6                 return false;\n7         }\n8         return true;\n9     }\n", "fixed_code": "    public static boolean is_happy(String s) {\n        if (s.length() < 3)\n            return false;\n        for (int i = 0; i < s.length() - 2; i += 1) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2) || s.charAt(i + 2) == s.charAt(i))\n                return false;\n        }\n        return true;\n    }\n"}
{"bug_id": "ADD", "buggy_code": "1     public static int add(int x, int y) {\n2         return x | y;\n3     }\n", "fixed_code": "    public static int add(int x, int y) {\n        return x + y;\n    }\n"}
{"bug_id": "FIX_SPACES", "buggy_code": "1     public static String fix_spaces(String text) {\n2         String new_text = \"\";\n3         int i = 0;\n4         int start = 0;\n5         int end = 0;\n6         while (i < text.length()) {\n7             if (text.charAt(i) == ' ') end += 1;\n8             else {\n9                 if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n10                 else if (end - start > 0) {\n11                     for (int j = start; j < end; j += 1) {\n12                         new_text += \"_\";\n13                     }\n14                     new_text += text.substring(i, i + 1);\n15                 } else {\n16                     new_text += text.substring(i, i + 1);\n17                 }\n18                 start = i + 1;\n19                 end = i + 1;\n20             }\n21             i += 1;\n22         }\n23 \n24         return new_text;\n25     }\n", "fixed_code": "    public static String fix_spaces(String text) {\n        String new_text = \"\";\n        int i = 0;\n        int start = 0;\n        int end = 0;\n        while (i < text.length()) {\n            if (text.charAt(i) == ' ') end += 1;\n            else {\n                if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n                else if (end - start > 0) {\n                    for (int j = start; j < end; j += 1) {\n                        new_text += \"_\";\n                    }\n                    new_text += text.substring(i, i + 1);\n                } else {\n                    new_text += text.substring(i, i + 1);\n                }\n                start = i + 1;\n                end = i + 1;\n            }\n            i += 1;\n        }\n\n        if (end - start > 2) new_text += \"-\";\n        else if (end - start > 0) {\n            for (int j = start; j < end; j += 1) {\n                new_text += \"_\";\n            }\n        }\n        return new_text;\n    }\n"}
{"bug_id": "DERIVATIVE", "buggy_code": "1     public static List<Integer> derivative(List<Integer> xs) {\n2         List<Integer> result = new ArrayList<Integer>();\n3         \n4         for (int i = 0; i < xs.size(); i += 1)\n5             result.add(xs.get(i));\n6         return result;\n7     }\n", "fixed_code": "    public static List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<Integer>();\n        \n        for (int i = 1; i < xs.size(); i += 1)\n            result.add(i * xs.get(i));\n        return result;\n    }\n"}
{"bug_id": "LARGEST_PRIME_FACTOR", "buggy_code": "1     public static int largest_prime_factor(int n) {\n2         int largest = 1;\n3         for (int j = 2; j < n; j += 1) {\n4             if (is_prime(j)){\n5                 largest = n % j;\n6             }\n7         }\n8         return largest;\n9     }\n", "fixed_code": "    public static int largest_prime_factor(int n) {\n        int largest = 1;\n        for (int j = 2; j < n; j += 1) {\n            if (n % j == 0 && is_prime(j)){\n                largest = j;\n            }\n        }\n        return largest;\n    }\n"}
{"bug_id": "FACTORIZE", "buggy_code": "1     public static List<Integer> factorize(int n){\n2         List<Integer> result = new ArrayList<Integer>();\n3 \n4         int i = 2;\n5         while (i <= (int)(Math.sqrt(n) + 1)){\n6             if (n % i == 0){\n7                 result.add(i);\n8                 n = n / i;\n9             } else{\n10                 i += 1;\n11             }\n12         }\n13 \n14         return result;\n15     }\n", "fixed_code": "    public static List<Integer> factorize(int n){\n        List<Integer> result = new ArrayList<Integer>();\n\n        int i = 2;\n        while (i <= (int)(Math.sqrt(n) + 1)){\n            if (n % i == 0){\n                result.add(i);\n                n = n / i;\n            } else{\n                i += 1;\n            }\n        }\n\n        if (n > 1){\n            result.add(n);\n        }\n        return result;\n    }\n"}
{"bug_id": "SEPARATE_PAREN_GROUPS", "buggy_code": "1     public static List<String> separate_paren_groups(String paren_string) {\n2         List<String> result = new ArrayList<String>();\n3         String current_string = \"\";\n4         int current_depth = 0;\n5 \n6         for (char c : paren_string.toCharArray()) {\n7             if (c == '('){\n8                 current_depth += 1;\n9                 current_string += String.valueOf(c);\n10             } else {\n11                 current_depth -= 1;\n12                 current_string += String.valueOf(c);\n13 \n14                 if (current_depth == 0){\n15                     result.add(current_string);\n16                     current_string = \"\";\n17                 }\n18             }\n19         }\n20         return result;\n21     }\n", "fixed_code": "    public static List<String> separate_paren_groups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        String current_string = \"\";\n        int current_depth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '('){\n                current_depth += 1;\n                current_string += String.valueOf(c);\n            } else if (c == ')'){\n                current_depth -= 1;\n                current_string += String.valueOf(c);\n\n                if (current_depth == 0){\n                    result.add(current_string);\n                    current_string = \"\";\n                }\n            }\n        }\n        return result;\n    }\n"}
{"bug_id": "CHECK_DICT_CASE", "buggy_code": "1     public static boolean check_dict_case(HashMap<Object, Object> dict) {\n2         if (dict.size() == 0)\n3             return false;\n4         else {\n5             String state = \"start\";\n6             for (Object key : dict.keySet()) {\n7                 if (!(key instanceof String)) {\n8                     state = \"mixed\";\n9                     break;\n10                 }\n11                 String str_key = (String) key;\n12                 if (state.equals(\"start\")) {\n13                     if (str_key.toUpperCase().equals(str_key))\n14                         state = \"upper\";\n15                     else if (str_key.toLowerCase().equals(str_key))\n16                         state = \"lower\";\n17                     else {\n18                         state = \"mixed\";\n19                         break;\n20                     }\n21                 } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n22                     state = \"mixed\";\n23                     break;\n24                 }\n25             }\n26             return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n27         }\n28     }\n", "fixed_code": "    public static boolean check_dict_case(HashMap<Object, Object> dict) {\n        if (dict.size() == 0)\n            return false;\n        else {\n            String state = \"start\";\n            for (Object key : dict.keySet()) {\n                if (!(key instanceof String)) {\n                    state = \"mixed\";\n                    break;\n                }\n                String str_key = (String) key;\n                if (state.equals(\"start\")) {\n                    if (str_key.toUpperCase().equals(str_key))\n                        state = \"upper\";\n                    else if (str_key.toLowerCase().equals(str_key))\n                        state = \"lower\";\n                    else {\n                        state = \"mixed\";\n                        break;\n                    }\n                } else if ((state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key))\n                        || (state.equals(\"lower\") && !str_key.toLowerCase().equals(str_key))) {\n                    state = \"mixed\";\n                    break;\n                }\n            }\n            return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n        }\n    }\n"}
{"bug_id": "CAN_ARRANGE", "buggy_code": "1     public static int can_arrange(int[] arr) {\n2         int ind = 1;\n3         for(int i = 0; i < arr.length - 1; i++) {\n4             if(arr[i] < arr[i + 1]) ind = i + 1;\n5         }\n6         return ind;\n7     }\n", "fixed_code": "    public static int can_arrange(int[] arr) {\n        int ind = -1;\n        for(int i = 1; i < arr.length; i++) {\n            if(arr[i] < arr[i - 1]) ind = i;\n        }\n        return ind;\n    }\n"}
{"bug_id": "CONCATENATE", "buggy_code": "1     public static String concatenate(String[] strings) {\n2         String result = null;\n3         for (String string : strings)\n4             result += string;\n5         return result;\n6     }\n", "fixed_code": "    public static String concatenate(String[] strings) {\n        String result = \"\";\n        for (String string : strings)\n            result += string;\n        return result;\n    }\n"}
{"bug_id": "MODP", "buggy_code": "1     public static int modp(int n, int p) {\n2         int result = 1;\n3         for (int i = 0; i < n; i += 1){\n4             result = 2 * result;\n5         }\n6         return result % p;\n7     }\n", "fixed_code": "    public static int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i += 1){\n            result = (2 * result) % p;\n        }\n        return result;\n    }\n"}
{"bug_id": "UNIQUE", "buggy_code": "1     public static List<Integer> unique(List<Integer> l) {\n2         List<Integer> result = new ArrayList<Integer>();\n3 \n4         for (Integer n : l){\n5             result.add(n);\n6         }\n7         Collections.sort(result);\n8 \n9         return result;\n10     }\n", "fixed_code": "    public static List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer n : l){\n            if (result.contains(n))\n                continue;\n            result.add(n);\n        }\n        Collections.sort(result);\n\n        return result;\n    }\n"}
{"bug_id": "FILTER_INTEGERS", "buggy_code": "1     public static List<Integer> filter_integers(List<Object> values) {\n2         List<Integer> result = new ArrayList<Integer>();\n3 \n4         for (Object value : values){\n5             result.add((Integer) value);\n6         }\n7         return result;\n8     }\n", "fixed_code": "    public static List<Integer> filter_integers(List<Object> values) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Object value : values){\n            if (value instanceof Integer){\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n"}
{"bug_id": "RESCALE_TO_UNIT", "buggy_code": "1     public static double[] rescale_to_unit(double[] numbers){\n2         double min = Double.MAX_VALUE;\n3         double max = Double.MIN_VALUE;\n4 \n5         for (int i = 0; i < numbers.length; i += 1) {\n6             if (numbers[i] > max) {\n7                 max = numbers[i];\n8             }\n9             else if (numbers[i] < min) {\n10                 min = numbers[i];\n11             }\n12         }\n13 \n14         double[] result = new double[numbers.length];\n15         for (int i = 0; i < numbers.length; i += 1) {\n16             result[i] = (numbers[i] - min) / (max - min);\n17         }\n18         return result;\n19     }\n", "fixed_code": "    public static double[] rescale_to_unit(double[] numbers){\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n\n        for (int i = 0; i < numbers.length; i += 1) {\n            if (numbers[i] > max){\n                max = numbers[i];\n            }\n            if (numbers[i] < min){\n                min = numbers[i];\n            }\n        }\n\n        double[] result = new double[numbers.length];\n        for (int i = 0; i < numbers.length; i += 1) {\n            result[i] = (numbers[i] - min) / (max - min);\n        }\n        return result;\n    }\n"}
{"bug_id": "EAT", "buggy_code": "1     public static int[] eat(int number, int need, int remaining) {\n2         return new int[] {number + need,  remaining - need};\n3     }\n", "fixed_code": "    public static int[] eat(int number, int need, int remaining) {\n        if (need <= remaining) {\n            return new int[] {number + need,  remaining - need};\n        }\n        else {\n            return new int[] {number + remaining , 0};\n        }\n    }\n"}
{"bug_id": "BELOW_ZERO", "buggy_code": "1     public static boolean below_zero(List<Integer> operations) {\n2         int balance = 0;\n3         for (Integer op : operations){\n4             balance += op;\n5             if (balance > 0){\n6                 return false;\n7             }\n8         }\n9         return true;\n10     }\n", "fixed_code": "    public static boolean below_zero(List<Integer> operations) {\n        int balance = 0;\n        for (Integer op : operations){\n            balance += op;\n            if (balance < 0){\n                return true;\n            }\n        }\n        return false;\n    }\n"}
{"bug_id": "SUM_SQUARED_NUMS", "buggy_code": "1     public static long sum_squared_nums(double[] lst) {\n2         int result = 0, i = 0;\n3         for(int j = 0; j < lst.length; j++) {\n4             result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n5         }\n6         return result;\n7     }\n", "fixed_code": "    public static long sum_squared_nums(double[] lst) {\n        int result = 0;\n        for(int i = 0; i < lst.length; i++) {\n            result += (Math.ceil(lst[i])) * (Math.ceil(lst[i]));\n        }\n        return result;\n    }\n"}
{"bug_id": "MOVE_ONE_BALL", "buggy_code": "1     public static boolean move_one_ball(ArrayList<Integer> arr) {\n2         if(arr.size() == 0) return true;\n3         ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n4         Collections.sort(sorted_arr);\n5         int min_value = sorted_arr.get(sorted_arr.size() - 1);\n6         int min_index = 0;\n7         for(int i = 0; i < arr.size(); i++) {\n8             if(arr.get(i) == min_value) min_index = i;\n9         }\n10         ArrayList<Integer> arr_after_move = new ArrayList<>();\n11         for(int i = min_index; i < arr.size(); i++) {\n12             arr_after_move.add(arr.get(i));\n13         }\n14         for(int i = 0; i < min_index; i++) {\n15             arr_after_move.add(arr.get(i));\n16         }\n17         for(int i = 0; i < arr.size(); i++) {\n18             if(arr_after_move.get(i) != sorted_arr.get(i)) {\n19                 return false;\n20             }\n21         }\n22         return true;\n23     }\n", "fixed_code": "    public static boolean move_one_ball(ArrayList<Integer> arr) {\n        if(arr.size() == 0) return true;\n        ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n        Collections.sort(sorted_arr);\n        int min_value = sorted_arr.get(0);\n        int min_index = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == min_value) min_index = i;\n        }\n        ArrayList<Integer> arr_after_move = new ArrayList<>();\n        for(int i = min_index; i < arr.size(); i++) {\n            arr_after_move.add(arr.get(i));\n        }\n        for(int i = 0; i < min_index; i++) {\n            arr_after_move.add(arr.get(i));\n        }\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr_after_move.get(i) != sorted_arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n"}
{"bug_id": "UNIQUE_DIGITS", "buggy_code": "1     public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n2         ArrayList<Integer> res = new ArrayList<Integer>();\n3         for(int i : x) {\n4             int num = i;\n5             boolean all_odd = true;\n6             while(num > 0) {\n7                 int curr_digit = num % 10;\n8                 if((curr_digit % 2) != 0) {\n9                     all_odd = true;\n10                     break;\n11                 }\n12                 num /= 10;\n13             }\n14             if(all_odd) {\n15                 res.add(i);\n16             }\n17         }\n18         Collections.sort(res);\n19         return res;\n20     }\n", "fixed_code": "    public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        for(int i : x) {\n            int num = i;\n            boolean all_odd = true;\n            while(num > 0) {\n                int curr_digit = num % 10;\n                if((curr_digit % 2) == 0) {\n                    all_odd = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if(all_odd) {\n                res.add(i);\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n"}
{"bug_id": "VALID_DATE", "buggy_code": "1     public static boolean valid_date(String date) {\n2         try {\n3             date = date.trim();\n4             String[] date_info = date.split(\"-\");\n5             if(date_info.length > 3) return false;\n6             int month = Integer.parseInt(date_info[0]);\n7             int day = Integer.parseInt(date_info[1]);\n8             int year = Integer.parseInt(date_info[2]);\n9 \n10             if(month < 1 || month > 12) return false;\n11 \n12             int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n13             for(int i = 0; i < month_check1.length; i++) {\n14                 if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n15             }\n16 \n17             int[] month_check2 = {4, 6, 9, 11};\n18             for(int i = 0; i < month_check2.length; i++) {\n19                 if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n20             }\n21             if(month == 2 && (day < 1 || day > 29)) return false;\n22         } catch (Exception e) {\n23             return false;\n24         }\n25         return true;\n26     }\n", "fixed_code": "    public static boolean valid_date(String date) {\n        try {\n            date = date.trim();\n            String[] date_info = date.split(\"-\");\n            if(date_info.length > 3) return false;\n            int month = Integer.parseInt(date_info[0]);\n            int day = Integer.parseInt(date_info[1]);\n            int year = Integer.parseInt(date_info[2]);\n\n            if(month < 1 || month > 12) return false;\n\n            int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n            for(int i = 0; i < month_check1.length; i++) {\n                if(month == month_check1[i] && (day < 1 || day > 31)) return false;\n            }\n\n            int[] month_check2 = {4, 6, 9, 11};\n            for(int i = 0; i < month_check2.length; i++) {\n                if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n            }\n            if(month == 2 && (day < 1 || day > 29)) return false;\n        } catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n"}
{"bug_id": "DIGIT_SUM", "buggy_code": "1     public static int digit_sum(String s) {\n2         int result = 0;\n3         for (char c : s.toCharArray()) {\n4             if (c == ' ')\n5                 break;\n6             if ('A' <= c && c <= 'Z')\n7                 result += (int) c;\n8         }\n9         return result;\n10     }\n", "fixed_code": "    public static int digit_sum(String s) {\n        int result = 0;\n        for (char c : s.toCharArray()) {\n            if ('A' <= c && c <= 'Z')\n                result += (int) c;\n        }\n        return result;\n    }\n"}
{"bug_id": "SPECIAL_FILTER", "buggy_code": "1     public static int special_filter(int[] nums) {\n2         int count = 0;\n3         ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n4         for (Integer num : nums) {\n5             if (num > 10) {\n6                 String number_as_string = num + \"\";\n7                 if (odd_digits.contains(number_as_string.charAt(0))\n8                         && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n9                     count += 1;\n10             }\n11         }\n12         return count;\n13     }\n", "fixed_code": "    public static int special_filter(int[] nums) {\n        int count = 0;\n        ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n        for (Integer num : nums) {\n            if (num > 10) {\n                String number_as_string = num + \"\";\n                if (odd_digits.contains(number_as_string.charAt(0) - '0')\n                        && odd_digits.contains(number_as_string.charAt(number_as_string.length() - 1) - '0'))\n                    count += 1;\n            }\n        }\n        return count;\n    }\n"}
{"bug_id": "CHOOSE_NUM", "buggy_code": "1     public static int choose_num(int x, int y) {\n2         if(x < y) return -1;\n3         if((y % 2) == 0) return y;\n4         if(x == y) return -1;\n5         return y - 1;\n6     }\n", "fixed_code": "    public static int choose_num(int x, int y) {\n        if(x > y) return -1;\n        if((y % 2) == 0) return y;\n        if(x == y) return -1;\n        return y - 1;\n    }\n"}
{"bug_id": "CIRCULAR_SHIFT", "buggy_code": "1     public static String circular_shift(int x, int shift) {\n2         String s = x + \"\";\n3 \n4         if (shift > s.length()) {\n5             StringBuilder sb = new StringBuilder();\n6             for (int i = s.length() - 1; i >= 0; i -= 1)\n7                 sb.append(s.charAt(i));\n8             return sb.toString();\n9         } else {\n10             return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n11         }\n12     }\n", "fixed_code": "    public static String circular_shift(int x, int shift) {\n        String s = x + \"\";\n\n        if (shift > s.length()) {\n            StringBuilder sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i -= 1)\n                sb.append(s.charAt(i));\n            return sb.toString();\n        } else {\n            return s.substring(s.length() - shift) + s.substring(0, s.length() - shift);\n        }\n    }\n"}
{"bug_id": "STARTS_ONE_ENDS", "buggy_code": "1     public static int starts_one_ends(int n) {\n2         if (n == 1)\n3             return 1;\n4         return (int) ((10 + 9) * Math.pow(10, n - 2));\n5     }\n", "fixed_code": "    public static int starts_one_ends(int n) {\n        if (n == 1)\n            return 1;\n        return (int) ((10 + 9 - 1) * Math.pow(10, n - 2));\n    }\n"}
{"bug_id": "RIGHT_ANGLE_TRIANGLE", "buggy_code": "1     public static boolean right_angle_triangle(int a, int b, int c) {\n2         return a*a + b*b == c*c;\n3     }\n", "fixed_code": "    public static boolean right_angle_triangle(int a, int b, int c) {\n        return a*a + b*b == c*c || b*b + c*c == a*a || c*c + a*a == b*b;\n    }\n"}
{"bug_id": "STRING_TO_MD5", "buggy_code": "1     public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n2         if (text.equals(\"\")) return null;\n3 \n4         MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n5         md.update(text.getBytes());\n6         byte[] digest = md.digest();\n7         return DatatypeConverter.printHexBinary(digest).toLowerCase();\n8     } \n", "fixed_code": "    public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n        if (text.equals(\"\")) return null;\n\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        return DatatypeConverter.printHexBinary(digest).toLowerCase();\n    } \n"}
{"bug_id": "INT_TO_MINI_ROMAN", "buggy_code": "1     public static String int_to_mini_roman(int number) {\n2         int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n3         String[] sym = new String[] {\n4             \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n5         };\n6 \n7         int i = 12;\n8         String result = \"\";\n9         while (number > 0) {\n10             result += sym[i];\n11             number %= num[i];\n12             i -= 1;\n13         }\n14         return result.toLowerCase();\n15     }\n", "fixed_code": "    public static String int_to_mini_roman(int number) {\n        int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n        String[] sym = new String[] {\n            \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n        };\n\n        int i = 12;\n        String result = \"\";\n        while (number > 0) {\n            int div = (int) (number / num[i]);\n            while (div > 0) {\n                result += sym[i];\n                div -= 1;\n            }\n            number %= num[i];\n            i -= 1;\n        }\n        return result.toLowerCase();\n    }\n"}
{"bug_id": "IS_BORED", "buggy_code": "1     public static int is_bored(String S) {\n2         String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n3         int result = 0;\n4         for (String sentence : sentences) {\n5             if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n6                 result += 1;\n7         }\n8         return result;\n9     }\n", "fixed_code": "    public static int is_bored(String S) {\n        String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n        int result = 0;\n        for (String sentence : sentences) {\n            sentence = sentence.trim();\n            if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n                result += 1;\n        }\n        return result;\n    }\n"}
{"bug_id": "TRUNCATE_NUMBER", "buggy_code": "1     public static double truncate_number(double number) {\n2         return number / 1.0;\n3     }\n", "fixed_code": "    public static double truncate_number(double number) {\n        return number % 1.0;\n    }\n"}
{"bug_id": "LARGEST_SMALLEST_INTEGERS", "buggy_code": "1     public static int[] largest_smallest_integers(int[] lst) {\n2         boolean negative = true, positive = true;\n3         int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n4         for(int i = 1; i < lst.length; i++) {\n5             if(lst[i] < 0) {\n6                 negative = false;\n7                 max_negative = Math.min(max_negative, lst[i]);\n8             } else if(lst[i] > 0) {\n9                 positive = true;\n10                 min_positive = Math.min(min_positive, lst[i]);\n11             }\n12         }\n13         if(!negative) max_negative = 0;\n14         if(!positive) min_positive = 0;\n15         int[] result = {max_negative, min_positive};\n16         return result;\n17     }\n", "fixed_code": "    public static int[] largest_smallest_integers(int[] lst) {\n        boolean negative = false, positive = false;\n        int max_negative = Integer.MIN_VALUE, min_positive = Integer.MAX_VALUE; \n        for(int i = 0; i < lst.length; i++) {\n            if(lst[i] < 0) {\n                negative = true;\n                max_negative = Math.max(max_negative, lst[i]);\n            } else if(lst[i] > 0) {\n                positive = true;\n                min_positive = Math.min(min_positive, lst[i]);\n            }\n        }\n        if(!negative) max_negative = 0;\n        if(!positive) min_positive = 0;\n        int[] result = {max_negative, min_positive};\n        return result;\n    }\n"}
{"bug_id": "WORDS_STRINGS", "buggy_code": "1 \tpublic static ArrayList<String> words_strings(String s) {\n2 \t\tArrayList<String> result = new ArrayList<String>();\n3 \t\tString s_list = \"\";\n4 \t\tfor(char c : s.toCharArray()) {\n5 \t\t\tif(c == ',') {\n6 \t\t\t\ts_list += ' ';\n7 \t\t\t} else {\n8 \t\t\t\ts_list += c;\n9 \t\t\t}\n10 \t\t}\n11 \t\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n12 \t\tfor(String r : result_array) {\n13 \t\t\tresult.add(r);\n14 \t\t}\n15 \t\treturn result;\n16 \t}\n", "fixed_code": "\tpublic static ArrayList<String> words_strings(String s) {\n\t\tArrayList<String> result = new ArrayList<String>();\n\t\tif(s == null || s.isEmpty()) return result;\n\t\tString s_list = \"\";\n\t\tfor(char c : s.toCharArray()) {\n\t\t\tif(c == ',') {\n\t\t\t\ts_list += ' ';\n\t\t\t} else {\n\t\t\t\ts_list += c;\n\t\t\t}\n\t\t}\n\t\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\t\tfor(String r : result_array) {\n\t\t\tresult.add(r);\n\t\t}\n\t\treturn result;\n\t}\n"}
{"bug_id": "ENCRYPT", "buggy_code": "1     public static String encrypt(String s) {\n2         StringBuilder sb = new StringBuilder();\n3         String d = \"abcdefghijklmnopqrstuvwxyz\";\n4         for (char c : s.toCharArray()){\n5             if ('a' <= c && c <= 'z'){\n6                 sb.append(\n7                     d.charAt(s.indexOf((int) c) + 2 * 2)\n8                 );\n9             } else {\n10                 sb.append(c);\n11             }\n12         }\n13         return sb.toString();\n14     }\n", "fixed_code": "    public static String encrypt(String s) {\n        StringBuilder sb = new StringBuilder();\n        String d = \"abcdefghijklmnopqrstuvwxyz\";\n        for (char c : s.toCharArray()){\n            if ('a' <= c && c <= 'z'){\n                sb.append(\n                    d.charAt((d.indexOf((int) c) + 2 * 2) % 26)\n                );\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n"}
{"bug_id": "SORT_THIRD", "buggy_code": "1     public static List<Integer> sort_third(List<Integer> l) {\n2         List<Integer> result = new ArrayList<Integer>();\n3 \n4         List<Integer> thirds = new ArrayList<Integer>();\n5         for (int i = 0; i < l.size(); i += 3){\n6             thirds.add(l.get(i));\n7         }\n8         Collections.sort(thirds);\n9 \n10         for (int i = 0; i < l.size(); i += 1){\n11             if (i % 3 == 0){\n12                 result.add(thirds.get(i));\n13             } else{\n14                 result.add(l.get(i));\n15             }\n16         }\n17         return result;\n18     }\n", "fixed_code": "    public static List<Integer> sort_third(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        List<Integer> thirds = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i += 3){\n            thirds.add(l.get(i));\n        }\n        Collections.sort(thirds);\n\n        for (int i = 0; i < l.size(); i += 1){\n            if (i % 3 == 0){\n                result.add(thirds.get((int)(i / 3)));\n            } else{\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n"}
{"bug_id": "GET_MAX_TRIPLES", "buggy_code": "1     public static int get_max_triples(int n) {\n2         int[] A = new int[n];\n3         for (int i = 1; i <= n; i += 1)\n4             A[i - 1] = i * i - i + 1;\n5         \n6         int result = 0;\n7         for (int i = 0; i < n-2; i += 1) {\n8             for (int j = 0; j < n-1; j += 1) {\n9                 for (int k = 0; k < n; k += 1) {\n10                     if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n11                 }\n12             }\n13         }\n14         return result;\n15     }\n", "fixed_code": "    public static int get_max_triples(int n) {\n        int[] A = new int[n];\n        for (int i = 1; i <= n; i += 1)\n            A[i - 1] = i * i - i + 1;\n        \n        int result = 0;\n        for (int i = 0; i < n-2; i += 1) {\n            for (int j = i + 1; j < n-1; j += 1) {\n                for (int k = j + 1; k < n; k += 1) {\n                    if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n                }\n            }\n        }\n        return result;\n    }\n"}
{"bug_id": "MONOTONIC", "buggy_code": "1     public static boolean monotonic(int[] l) {\n2         int[] sorted = new int[l.length];\n3         int[] reverse_sorted = new int[l.length];\n4 \n5         sorted = l;\n6         \n7         Arrays.sort(sorted);\n8         \n9         for (int i = 0; i < l.length; i += 1)\n10             reverse_sorted[i] = sorted[l.length - i - 1]; \n11         \n12         if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n13             return true;\n14         return false;\n15     }\n", "fixed_code": "    public static boolean monotonic(int[] l) {\n        int[] sorted = new int[l.length];\n        int[] reverse_sorted = new int[l.length];\n\n        System.arraycopy(l, 0, sorted, 0, l.length);\n        \n        Arrays.sort(sorted);\n        \n        for (int i = 0; i < l.length; i += 1)\n            reverse_sorted[i] = sorted[l.length - i - 1]; \n        \n        if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n            return true;\n        return false;\n    }\n"}
{"bug_id": "ADD_EVEN_AT_ODD", "buggy_code": "1     public static int add_even_at_odd(int[] lst) {\n2         int sum = 0;\n3         for (int i = 0; i < lst.length; i += 1) {\n4             if (lst[i] % 2 == 0)\n5                 sum += lst[i];\n6         }\n7         return sum;\n8     }\n", "fixed_code": "    public static int add_even_at_odd(int[] lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.length; i += 2) {\n            if (lst[i] % 2 == 0)\n                sum += lst[i];\n        }\n        return sum;\n    }\n"}
{"bug_id": "MIN_PATH", "buggy_code": "1     public static int[] min_path(int[][] grid, int k) {\n2         int n = grid.length;\n3         int val = n * n + 1;\n4         for(int i = 0; i < n; i++) {\n5             for(int j = 0; j < n; j++) {\n6                 if(grid[i][j] == 1) {\n7                     if(i != 0) val = Math.max(val, grid[i][j + 1]);\n8                     if(j != 0) val = Math.min(val, grid[i - 1][j]);\n9                     if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n10                     if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n11                 }\n12             }\n13         }\n14         int[] ans = new int[k];\n15         for(int i = 0; i < k; i++) {\n16             if((i % 2) == 0) ans[i] = 1;\n17             else ans[i] = val;\n18         }\n19         return ans;\n20     }\n", "fixed_code": "    public static int[] min_path(int[][] grid, int k) {\n        int n = grid.length;\n        int val = n * n + 1;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                if(grid[i][j] == 1) {\n                    if(i != 0) val = Math.min(val, grid[i - 1][j]);\n                    if(j != 0) val = Math.min(val, grid[i][j - 1]);\n                    if(i != n - 1) val = Math.min(val, grid[i + 1][j]);\n                    if(j != n - 1) val = Math.min(val, grid[i][j + 1]);\n                }\n            }\n        }\n        int[] ans = new int[k];\n        for(int i = 0; i < k; i++) {\n            if((i % 2) == 0) ans[i] = 1;\n            else ans[i] = val;\n        }\n        return ans;\n    }\n"}
{"bug_id": "DIGITS", "buggy_code": "1     public static int digits(int n) {\n2         int product = 1;\n3         int odd_count = 0;\n4         while(n >= 0) {\n5             int digit = n * 10;\n6             if(digit % 2 == 0) {\n7                 product /= digit;\n8                 odd_count++;\n9             }\n10             n /= 10;\n11         }\n12         if(odd_count == 0) return 0;\n13         return product;\n14     }\n", "fixed_code": "    public static int digits(int n) {\n        int product = 1;\n        int odd_count = 0;\n        while(n > 0) {\n            int digit = n % 10;\n            if(digit % 2 == 1) {\n                product *= digit;\n                odd_count++;\n            }\n            n /= 10;\n        }\n        if(odd_count == 0) return 0;\n        return product;\n    }\n"}
{"bug_id": "HAS_CLOSE_ELEMENTS", "buggy_code": "1     public static boolean has_close_elements(List<Double> numbers, double threshold){\n2         for (int i = 0; i < numbers.size(); i += 1){\n3             for (int j = i + 1; j < numbers.size(); j += 1){\n4                 double distance = numbers.get(i) - numbers.get(j);\n5                 if (distance < threshold)\n6                     return true;\n7             }\n8         }\n9         return false;\n10     }\n", "fixed_code": "    public static boolean has_close_elements(List<Double> numbers, double threshold){\n        for (int i = 0; i < numbers.size(); i += 1){\n            for (int j = i + 1; j < numbers.size(); j += 1){\n                double distance = Math.abs(numbers.get(i) - numbers.get(j));\n                if (distance < threshold)\n                    return true;\n            }\n        }\n        return false;\n    }\n"}
{"bug_id": "GET_POSITIVE", "buggy_code": "1     public static List<Integer> get_positive(List<Integer> numbers) {\n2         List<Integer> result = new ArrayList<Integer>();\n3 \n4         for (Integer number : numbers) {\n5             result.add(number);\n6         }\n7         return result;\n8     }\n", "fixed_code": "    public static List<Integer> get_positive(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer number : numbers) {\n            if (number > 0){\n                result.add(number);\n            }\n        }\n        return result;\n    }\n"}
{"bug_id": "BY_LENGTH", "buggy_code": "1     public static ArrayList<String> by_length(ArrayList<Integer> a) {\n2         Map<Integer, String> digit_map = new HashMap<>();\n3         digit_map.put(1, \"One\");\n4         digit_map.put(2, \"Two\");\n5         digit_map.put(3, \"Three\");\n6         digit_map.put(4, \"Four\");\n7         digit_map.put(5, \"Five\");\n8         digit_map.put(6, \"Six\");\n9         digit_map.put(7, \"Seven\");\n10         digit_map.put(8, \"Eight\");\n11         digit_map.put(9, \"Nine\");\n12         Collections.sort(a, Collections.reverseOrder());\n13         ArrayList<String> result = new ArrayList<>();\n14         for(int num : a) {\n15             if(digit_map.get(num) != \"\") {\n16                 result.add(digit_map.get(num));\n17             }\n18         }\n19         return result;\n20     }\n", "fixed_code": "    public static ArrayList<String> by_length(ArrayList<Integer> a) {\n        Map<Integer, String> digit_map = new HashMap<>();\n        digit_map.put(1, \"One\");\n        digit_map.put(2, \"Two\");\n        digit_map.put(3, \"Three\");\n        digit_map.put(4, \"Four\");\n        digit_map.put(5, \"Five\");\n        digit_map.put(6, \"Six\");\n        digit_map.put(7, \"Seven\");\n        digit_map.put(8, \"Eight\");\n        digit_map.put(9, \"Nine\");\n        Collections.sort(a, Collections.reverseOrder());\n        ArrayList<String> result = new ArrayList<>();\n        for(int num : a) {\n            if(digit_map.get(num) != null) {\n                result.add(digit_map.get(num));\n            }\n        }\n        return result;\n    }\n"}
{"bug_id": "X_OR_Y", "buggy_code": "1     public static int x_or_y(int n, int x, int y) {\n2         if (n == 1) return y;\n3         for (int i = 2; i < n; i += 1) {\n4             if (n % i == 0) return x;\n5         }\n6         return y;\n7     }\n", "fixed_code": "    public static int x_or_y(int n, int x, int y) {\n        if (n == 1) return y;\n        for (int i = 2; i < n; i += 1) {\n            if (n % i == 0) return y;\n        }\n        return x;\n    }\n"}
{"bug_id": "STRING_XOR", "buggy_code": "1     public static String string_xor(String a, String b){\n2         String result = \"\";\n3         for (int i = 0; i < a.length(); i += 1){\n4             if (a.charAt(i) == b.charAt(i)){\n5                 result += \"0\";\n6             }\n7         }\n8         return result;\n9     }\n", "fixed_code": "    public static String string_xor(String a, String b){\n        String result = \"\";\n        for (int i = 0; i < a.length(); i += 1){\n            if (a.charAt(i) == b.charAt(i)){\n                result += \"0\";\n            }\n            else{\n                result += \"1\";\n            }\n        }\n        return result;\n    }\n"}
{"bug_id": "INCR_LIST", "buggy_code": "1     public static List<Integer> incr_list(List<Integer> l) {\n2         List<Integer> result = new ArrayList<Integer>();\n3 \n4         for (Integer n : l) {\n5             result.add(n - 1);\n6         }\n7         return result;\n8     }\n", "fixed_code": "    public static List<Integer> incr_list(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (Integer n : l) {\n            result.add(n + 1);\n        }\n        return result;\n    }\n"}
{"bug_id": "IS_SORTED", "buggy_code": "1     public static boolean is_sorted(int[] lst) {\n2         HashMap<Integer, Integer> count_num = new HashMap<>();\n3         for(int i = 0; i < lst.length; i++) {\n4             count_num.put(lst[i], 0);\n5         }\n6         for(int i = 0; i < lst.length; i++) {\n7             count_num.put(lst[i], count_num.get(lst[i]) + 1);\n8         }\n9         for(int i = 0; i < lst.length; i++) {\n10             if(count_num.get(lst[i]) > 2) return false;\n11         }\n12         for(int i = 0; i < lst.length - 1; i++) {\n13             if(lst[i] <= lst[i + 1]) return false;\n14         }\n15         return true;\n16     }\n", "fixed_code": "    public static boolean is_sorted(int[] lst) {\n        HashMap<Integer, Integer> count_num = new HashMap<>();\n        for(int i = 0; i < lst.length; i++) {\n            count_num.put(lst[i], 0);\n        }\n        for(int i = 0; i < lst.length; i++) {\n            count_num.put(lst[i], count_num.get(lst[i]) + 1);\n        }\n        for(int i = 0; i < lst.length; i++) {\n            if(count_num.get(lst[i]) > 2) return false;\n        }\n        for(int i = 0; i < lst.length - 1; i++) {\n            if(lst[i] > lst[i + 1]) return false;\n        }\n        return true;\n    }\n"}
{"bug_id": "IS_EQUAL_TO_SUM_EVEN", "buggy_code": "1     public static boolean is_equal_to_sum_even(int n) {\n2         return ((n * 2 == 1) ^ (n < 8));\n3     }\n", "fixed_code": "    public static boolean is_equal_to_sum_even(int n) {\n        return ((n % 2 == 0) && (n >= 8));\n    }\n"}
{"bug_id": "GET_CLOSET_VOWEL", "buggy_code": "1     public static String get_closet_vowel(String word) {\n2         if(word.length() < 3) return \"\";\n3         ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n4         for(int i = word.length() - 2; i >= 0; i--) {\n5             if(vowels.contains(word.charAt(i))) {\n6                 if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n7                     return word.substring(i, i + 1);\n8                 }\n9             }\n10         }\n11         return \"\";\n12     }\n", "fixed_code": "    public static String get_closet_vowel(String word) {\n        if(word.length() < 3) return \"\";\n        ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n        for(int i = word.length() - 2; i > 0; i--) {\n            if(vowels.contains(word.charAt(i))) {\n                if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                    return word.substring(i, i + 1);\n                }\n            }\n        }\n        return \"\";\n    }\n"}
{"bug_id": "SORT_EVEN", "buggy_code": "1     public static int[] sort_even(int[] l) {\n2         int[] result = new int[l.length];\n3 \n4         int[] evens = new int[1 + (int) (l.length / 2.)];\n5         for (int i = 0; i < l.length; i += 2) {\n6             evens[(int) i / 2] = l[i];\n7         }\n8         Arrays.sort(evens);\n9         for (int i = 0; i < l.length; i += 1) {\n10             if (i % 2 == 0){\n11                 result[i] = evens[(int) i / 2];\n12             } else{\n13                 result[i] = l[i];\n14             }\n15         }\n16         return result;\n17     }\n", "fixed_code": "    public static int[] sort_even(int[] l) {\n        int[] result = new int[l.length];\n\n        int[] evens = new int[(int) Math.ceil(l.length / 2.)];\n        for (int i = 0; i < l.length; i += 2){\n            evens[(int) i / 2] = l[i];\n        }\n        Arrays.sort(evens);\n        for (int i = 0; i < l.length; i += 1){\n            if (i % 2 == 0){\n                result[i] = evens[(int) i / 2];\n            } else{\n                result[i] = l[i];\n            }\n        }\n        return result;\n    }\n"}
{"bug_id": "INTERSECTION", "buggy_code": "1     public static String intersection(int[] interval1, int[] interval2) {\n2         int l = Math.min(interval1[0], interval2[0]);\n3         int r = Math.max(interval1[1], interval2[1]);\n4         int length = r - l;\n5         if(length > 0 && is_prime(length)) return \"YES\";\n6         return \"NO\";\n7     }\n", "fixed_code": "    public static String intersection(int[] interval1, int[] interval2) {\n        int l = Math.max(interval1[0], interval2[0]);\n        int r = Math.min(interval1[1], interval2[1]);\n        int length = r - l;\n        if(length > 0 && is_prime(length)) return \"YES\";\n        return \"NO\";\n    }\n"}
{"bug_id": "VOWELS_COUNT", "buggy_code": "1     public static int vowels_count(String str) {\n2         int result = 0;\n3         char[] str_chars = str.toCharArray();\n4 \n5         for (char c : str_chars) {\n6             if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n7                     || c == 'U')\n8                 result += 1;\n9         }\n10         if (str_chars[str_chars.length - 1] == 'y')\n11             result += 1;\n12         return result;\n13     }\n", "fixed_code": "    public static int vowels_count(String str) {\n        int result = 0;\n        char[] str_chars = str.toCharArray();\n\n        for (char c : str_chars) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U')\n                result += 1;\n        }\n        if (str_chars[str_chars.length - 1] == 'y' || str_chars[str_chars.length - 1] == 'Y')\n            result += 1;\n        return result;\n    }\n"}
{"bug_id": "HISTOGRAM", "buggy_code": "1     public static HashMap<Character, Integer> histogram(String s) {\n2         HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n3         if(s.isEmpty()) return res;\n4         String[] list_letters = s.split(\" \");\n5         int[] count_letter = new int[26];\n6         for(int i = 0; i < list_letters.length; i++) {\n7             char c = list_letters[i].charAt(0);\n8             count_letter[c - 'a']++;\n9         }\n10         int most_count = 0;\n11         for(int i = 0; i < 26; i++) {\n12             if(count_letter[i] < most_count) {\n13                 most_count = count_letter[i];\n14                 res.clear();\n15                 res.put((char) ('a' + i), most_count);\n16             } else if(count_letter[i] == most_count) {\n17                 res.put((char) ('a' + i), most_count);\n18             }\n19         }\n20         if(most_count == 0) res.clear();\n21         return res;\n22     }\n", "fixed_code": "    public static HashMap<Character, Integer> histogram(String s) {\n        HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n        if(s.isEmpty()) return res;\n        String[] list_letters = s.split(\" \");\n        int[] count_letter = new int[26];\n        for(int i = 0; i < list_letters.length; i++) {\n            char c = list_letters[i].charAt(0);\n            count_letter[c - 'a']++;\n        }\n        int most_count = 0;\n        for(int i = 0; i < 26; i++) {\n            if(count_letter[i] > most_count) {\n                most_count = count_letter[i];\n                res.clear();\n                res.put((char) ('a' + i), most_count);\n            } else if(count_letter[i] == most_count) {\n                res.put((char) ('a' + i), most_count);\n            }\n        }\n        if(most_count == 0) res.clear();\n        return res;\n    }\n"}
{"bug_id": "ANTI_SHUFFLE", "buggy_code": "1     public static String anti_shuffle(String s) {\n2         String result = \"\";\n3         for (String str : s.split(\" \")) {\n4             char[] chars = str.toCharArray();\n5             Arrays.sort(chars);\n6             result += new String(chars);\n7         }\n8         return result;\n9     }\n", "fixed_code": "    public static String anti_shuffle(String s) {\n        String result = \"\";\n        for (String str : s.split(\" \")) {\n            char[] chars = str.toCharArray();\n            Arrays.sort(chars);\n            result += new String(chars) + \" \";\n        }\n        return result.substring(0, result.length() - 1);\n    }\n"}
{"bug_id": "IS_SIMPLE_POWER", "buggy_code": "1     public static boolean is_simple_power(int x, int n) {\n2         int power = 1;\n3         while (power < x) {\n4             power *= n;\n5         }\n6         return power == x;\n7     }\n", "fixed_code": "    public static boolean is_simple_power(int x, int n) {\n        if (n == 1)\n            return x == 1;\n        int power = 1;\n        while (power < x) {\n            power *= n;\n        }\n        return power == x;\n    }\n"}
{"bug_id": "PAIRS_SUM_TO_ZERO", "buggy_code": "1     public static boolean pairs_sum_to_zero(List<Integer> l) {\n2         for (int i = 0; i < l.size(); i += 1) {\n3             for (int j = 0; j < l.size(); j += 1){\n4                 if (l.get(i) + l.get(j) == 0)\n5                     return true;\n6             }\n7         }\n8         return false;\n9     }\n", "fixed_code": "    public static boolean pairs_sum_to_zero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i += 1) {\n            for (int j = i + 1; j < l.size(); j += 1){\n                if (l.get(i) + l.get(j) == 0)\n                    return true;\n            }\n        }\n        return false;\n    }\n"}
{"bug_id": "MAX_FILL", "buggy_code": "1     public static int max_fill(int[][] grid, int bucket_capacity) {\n2         int result = 0;\n3         for(int i = 0; i < grid.length; i++) {\n4             int row_capacity = 0;\n5             for(int j = 0; j < grid[j].length; j++) {\n6                 row_capacity += grid[j][i];\n7             }\n8             result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n9         }\n10         return result;\n11     }\n", "fixed_code": "    public static int max_fill(int[][] grid, int bucket_capacity) {\n        int result = 0;\n        for(int i = 0; i < grid.length; i++) {\n            int row_capacity = 0;\n            for(int j = 0; j < grid[i].length; j++) {\n                row_capacity += grid[i][j];\n            }\n            result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n        }\n        return result;\n    }\n"}
{"bug_id": "MAXIMUM_K", "buggy_code": "1     public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n2         Collections.sort(arr);\n3         ArrayList<Integer> result = new ArrayList<>();\n4         for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n5             result.add(arr.get(i));\n6         }\n7         return result;\n8     }\n", "fixed_code": "    public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n        Collections.sort(arr);\n        ArrayList<Integer> result = new ArrayList<>();\n        for(int i = arr.size() - k; i <= arr.size() - 1; i++) {\n            result.add(arr.get(i));\n        }\n        return result;\n    }\n"}
{"bug_id": "LARGEST_DIVISOR", "buggy_code": "1     public static int largest_divisor(int n) {\n2         for (int i = n; i >= 0; i -= 1){\n3             if (n % i == 0)\n4                 return i;\n5         }\n6         return 1;\n7     }\n", "fixed_code": "    public static int largest_divisor(int n) {\n        for (int i = n - 1; i >= 1; i -= 1){\n            if (n % i == 0)\n                return i;\n        }\n        return 1;\n    }\n"}
{"bug_id": "STRING_SEQUENCE", "buggy_code": "1     public static String string_sequence(int n) {\n2         String result = \"\";\n3         for (int i = 0; i <= n; i += 1){\n4             result += i + \" \";\n5         }\n6         return result;\n7     }\n", "fixed_code": "    public static String string_sequence(int n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i += 1){\n            result += i + \" \";\n        }\n        return result.trim();\n    }\n"}
{"bug_id": "MEDIAN", "buggy_code": "1     public static double median(int[] list) {\n2         Arrays.sort(list);\n3 \n4         if (list.length % 2 == 1) {\n5             return list[(int) (list.length / 2)];\n6         } else {\n7             return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n8         }\n9     }\n", "fixed_code": "    public static double median(int[] list) {\n        Arrays.sort(list);\n\n        if (list.length % 2 == 1) {\n            return list[(int) (list.length / 2)];\n        } else {\n            return (list[(int) (list.length / 2)] + list[(int) (list.length / 2) - 1]) / 2.;\n        }\n    }\n"}
{"bug_id": "SORT_ARRAY_BINARY", "buggy_code": "1          public int compare(Integer o1, Integer o2) {\n2             int num_ones_o1 = number_ones(o1);\n3             int num_ones_o2 = number_ones(o2);\n4             if(num_ones_o1 == num_ones_o2) {\n5                if(o1 == o2) return 1;\n6                if(o1 < o2) return 0;\n7                if(o1 > o2) return -1;\n8             }\n9             if(num_ones_o1 < num_ones_o2) return -1;\n10             else return 1;\n11          }\n", "fixed_code": "         public int compare(Integer o1, Integer o2) {\n            int num_ones_o1 = number_ones(o1);\n            int num_ones_o2 = number_ones(o2);\n            if(num_ones_o1 == num_ones_o2) {\n               if(o1 == o2) return 0;\n               if(o1 < o2) return -1;\n               if(o1 > o2) return 1;\n            }\n            if(num_ones_o1 < num_ones_o2) return -1;\n            else return 1;\n         }\n"}
{"bug_id": "STRLEN", "buggy_code": "1     public static int strlen(String string){\n2         return string.length() - 1;\n3     }\n", "fixed_code": "    public static int strlen(String string){\n        return string.length();\n    }\n"}
{"bug_id": "FILTER_BY_PREFIX", "buggy_code": "1     public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n2         List<String> result = new ArrayList<String>();\n3 \n4         for (String string : strings){\n5             if (string.startsWith(prefix, 1)){\n6                 result.add(string);\n7             }\n8         }\n9         return result;\n10     }\n", "fixed_code": "    public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n        List<String> result = new ArrayList<String>();\n\n        for (String string : strings){\n            if (string.startsWith(prefix)){\n                result.add(string);\n            }\n        }\n        return result;\n    }\n"}
{"bug_id": "WORDS_IN_SENTENCE", "buggy_code": "1     public static String words_in_sentence(String sentence) {\n2         String result = \"\";\n3 \n4         for (String word : sentence.split(\" \")) {\n5             int flag = 0;\n6             for (int i = 2; i < word.length(); i += 1){\n7                 if (word.length() % i == 0) flag = 1;\n8             }\n9             if (flag == 0 || word.length() == 2)\n10                 result += word + \" \";\n11         }\n12         return result.trim();\n13     }\n", "fixed_code": "    public static String words_in_sentence(String sentence) {\n        String result = \"\";\n\n        for (String word : sentence.split(\" \")) {\n            int flag = 0;\n            if (word.length() == 1) flag = 1;\n            for (int i = 2; i < word.length(); i += 1){\n                if (word.length() % i == 0) flag = 1;\n            }\n            if (flag == 0 || word.length() == 2)\n                result += word + \" \";\n        }\n        return result.trim();\n    }\n"}
{"bug_id": "PLUCK", "buggy_code": "1     public static int[] pluck(int[] arr) {\n2         int min_even = 0;\n3         int index = 0;\n4 \n5         for (int i = 0; i < arr.length; i += 1) {\n6             if (arr[i] % 2 == 0 && arr[i] < min_even) {\n7                 min_even = arr[i];\n8                 index = i;\n9             }\n10         }\n11         if (index == -1)\n12             return new int[]{};\n13         return new int[] {min_even, index};\n14     }\n", "fixed_code": "    public static int[] pluck(int[] arr) {\n        int min_even = Integer.MAX_VALUE;\n        int index = -1;\n\n        for (int i = 0; i < arr.length; i += 1) {\n            if (arr[i] % 2 == 0 && arr[i] < min_even) {\n                min_even = arr[i];\n                index = i;\n            }\n        }\n        if (index == -1)\n            return new int[]{};\n        return new int[] {min_even, index};\n    }\n"}
{"bug_id": "PARSE_NESTED_PARENS", "buggy_code": "1     public static List<Integer> parse_nested_parens(String paren_string) {\n2         String[] paren_groups = paren_string.split(\" \");\n3         List<Integer> result = new ArrayList<Integer>();\n4 \n5         for (String paren_group : paren_groups) {\n6             int depth = 0;\n7             int max_depth = 0;\n8             for (char c : paren_group.toCharArray()){\n9                 if (c == '('){\n10                     depth += 1;\n11                     max_depth = Math.max(depth, max_depth);\n12                 }\n13             }\n14             result.add(max_depth);\n15         }\n16 \n17         return result;\n18     }\n", "fixed_code": "    public static List<Integer> parse_nested_parens(String paren_string) {\n        String[] paren_groups = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<Integer>();\n\n        for (String paren_group : paren_groups) {\n            int depth = 0;\n            int max_depth = 0;\n            for (char c : paren_group.toCharArray()){\n                if (c == '('){\n                    depth += 1;\n                    max_depth = Math.max(depth, max_depth);\n                } else {\n                    depth -= 1;\n                }\n            }\n            result.add(max_depth);\n        }\n\n        return result;\n    }\n"}
{"bug_id": "TOTAL_MATCH", "buggy_code": "1     public static List<String> total_match(List<String> lst1, List<String> lst2) {\n2         int l1 = 0;\n3         for (String st : lst1)\n4             l1 += st.length();\n5         int l2 = 0;\n6         for (String st : lst1)\n7             l2 = st.length();\n8         \n9         if (l1 <= l2)\n10             return lst1;\n11         return lst2;\n12     }\n", "fixed_code": "    public static List<String> total_match(List<String> lst1, List<String> lst2) {\n        int l1 = 0;\n        for (String st : lst1)\n            l1 += st.length();\n        int l2 = 0;\n        for (String st : lst2)\n            l2 += st.length();\n        \n        if (l1 <= l2)\n            return lst1;\n        return lst2;\n    }\n"}
{"bug_id": "COUNT_UP_TO", "buggy_code": "1     public static List<Integer> count_up_to(int n) {\n2         List<Integer> primes = new ArrayList<Integer>();\n3 \n4         for (int i = 2; i < n; i += 1){\n5             boolean is_prime = false;\n6             for (int j = 2; j < i; j += 1){\n7                 if (i % j == 0) {\n8                     is_prime = false;\n9                 }\n10             }\n11             if (is_prime) primes.add(i);\n12         }\n13         return primes;\n14     }\n", "fixed_code": "    public static List<Integer> count_up_to(int n) {\n        List<Integer> primes = new ArrayList<Integer>();\n\n        for (int i = 2; i < n; i += 1){\n            boolean is_prime = true;\n            for (int j = 2; j < i; j += 1){\n                if (i % j == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) primes.add(i);\n        }\n        return primes;\n    }\n"}
{"bug_id": "ROUNDED_AVG", "buggy_code": "1     public static String rounded_avg(int n, int m) {\n2         if(m < n) return \"-1\";\n3         int summation = 0;\n4         for(int i = n; i < m + 1; i++) {\n5             summation += i;\n6         }\n7         double avg = ((double) summation)/((double) (m - n + 1));\n8         double rem = avg - Math.floor(avg);\n9         int avg_rounded = 0;\n10         if(rem <= 0.5) {\n11             avg_rounded = (int) Math.ceil(avg);\n12         } else {\n13             avg_rounded = (int) Math.ceil(avg);\n14         }\n15         return Integer.toBinaryString(avg_rounded);\n16     }\n", "fixed_code": "    public static String rounded_avg(int n, int m) {\n        if(m < n) return \"-1\";\n        int summation = 0;\n        for(int i = n; i < m + 1; i++) {\n            summation += i;\n        }\n        double avg = ((double) summation)/((double) (m - n + 1));\n        double rem = avg - Math.floor(avg);\n        int avg_rounded = 0;\n        if(rem <= 0.5) {\n            avg_rounded = (int) Math.floor(avg);\n        } else {\n            avg_rounded = (int) Math.ceil(avg);\n        }\n        return Integer.toBinaryString(avg_rounded);\n    }\n"}
{"bug_id": "EVEN_ODD_COUNT", "buggy_code": "1     public static int[] even_odd_count(int num) {\n2         int even_count = 0;\n3         int odd_count = 0;\n4 \n5         for (char c : (num + \"\").toCharArray()) {\n6             if ((int)c % 2 == 0) even_count += 1;\n7             if ((int)c % 2 == 1) odd_count += 1;\n8         }\n9         return new int[] {even_count, odd_count};\n10     }\n", "fixed_code": "    public static int[] even_odd_count(int num) {\n        int even_count = 0;\n        int odd_count = 0;\n\n        for (char c : (Math.abs(num) + \"\").toCharArray()) {\n            int n = c - '0';\n            if (n % 2 == 0) even_count += 1;\n            if (n % 2 == 1) odd_count += 1;\n        }\n        return new int[] {even_count, odd_count};\n    }\n"}
{"bug_id": "MAKE_PALINDROME", "buggy_code": "1     public static String make_palindrome(String str){\n2         if (str.length() == 0)\n3             return \"\";\n4 \n5         int beginning_of_suffix = 0;\n6         while (! is_palindrome(str.substring(beginning_of_suffix))){\n7             beginning_of_suffix += 1;\n8         }\n9         \n10         String result = str;\n11         result += str.substring(0, beginning_of_suffix);\n12         return result;\n13     }\n", "fixed_code": "    public static String make_palindrome(String str){\n        if (str.length() == 0)\n            return \"\";\n\n        int beginning_of_suffix = 0;\n        while (! is_palindrome(str.substring(beginning_of_suffix))){\n            beginning_of_suffix += 1;\n        }\n        \n        String result = str;\n        for (int i = beginning_of_suffix - 1; i >= 0; i -= 1){\n            result += String.valueOf(str.charAt(i));\n        }\n        return result;\n    }\n"}
{"bug_id": "SKJKASDKD", "buggy_code": "1     public static int skjkasdkd(int[] lst) {\n2         int max = 0;\n3         int i = 0;\n4         while(i < lst.length) {\n5             if (lst[i] > max && is_prime(lst[i]))\n6                 max = lst[i];\n7             i += 1;\n8         }\n9         int result = 0;\n10         for (char c : (max + \"\").toCharArray()) {\n11             result += (int) c;\n12         }\n13         return result;\n14     }\n", "fixed_code": "    public static int skjkasdkd(int[] lst) {\n        int max = 0;\n        int i = 0;\n        while(i < lst.length) {\n            if (lst[i] > max && is_prime(lst[i]))\n                max = lst[i];\n            i += 1;\n        }\n        int result = 0;\n        for (char c : (max + \"\").toCharArray()) {\n            result += c - '0';\n        }\n        return result;\n    }\n"}
{"bug_id": "MAX_ELEMENT", "buggy_code": "1     public static int max_element(List<Integer> l) {\n2         int m = 0;\n3         for (Integer e : l) {\n4             if (e > m){\n5                 m = e;\n6             }\n7         }\n8         return m;\n9     }\n", "fixed_code": "    public static int max_element(List<Integer> l) {\n        int m = l.get(0);\n        for (Integer e : l) {\n            if (e > m){\n                m = e;\n            }\n        }\n        return m;\n    }\n"}
{"bug_id": "FIBFIB", "buggy_code": "1     public static int fibfib(int n) {\n2         if (n == 0)\n3             return 0;\n4         if (n == 1)\n5             return 0;\n6         return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n7     }\n", "fixed_code": "    public static int fibfib(int n) {\n        if (n == 0)\n            return 0;\n        if (n == 1)\n            return 0;\n        if (n == 2)\n            return 1;\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n"}
{"bug_id": "COUNT_DISTINCT_CHARACTERS", "buggy_code": "1     public static int count_distinct_characters(String string) {\n2         HashSet<Character> distinct = new HashSet<Character>();\n3 \n4         for (char c : string.toCharArray()) {\n5             if (! distinct.contains(Character.toLowerCase(c)))\n6                 distinct.add(c);\n7         }\n8         return distinct.size();\n9     }\n", "fixed_code": "    public static int count_distinct_characters(String string) {\n        HashSet<Character> distinct = new HashSet<Character>();\n\n        for (char c : string.toCharArray()) {\n            if (! distinct.contains(Character.toLowerCase(c)))\n                distinct.add(Character.toLowerCase(c));\n        }\n        return distinct.size();\n    }\n"}
{"bug_id": "SOLUTION", "buggy_code": "1     public static int solution(ArrayList<Integer> lst) {\n2         int result = 0;\n3         for(int i = 0; i < lst.size(); i++) {\n4             if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n5                 result += lst.get(i);\n6             }\n7         }\n8         return result;\n9     }\n", "fixed_code": "    public static int solution(ArrayList<Integer> lst) {\n        int result = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if((i % 2) == 0 && (lst.get(i) % 2) == 1) {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n"}
{"bug_id": "WILL_IT_FLY", "buggy_code": "1     public static boolean will_it_fly(int[] q, int w) {\n2         int sum = 0;\n3         for (int i = 0; i < q.length; i += 1)\n4             sum += q[i];\n5         \n6         if (sum > w)\n7             return false;\n8         \n9         int i = 0;\n10         int j = q.length - 1;\n11         while (i < j) {\n12             if (q[i] != q[j])   return false;\n13         }\n14         return true;\n15     }\n", "fixed_code": "    public static boolean will_it_fly(int[] q, int w) {\n        int sum = 0;\n        for (int i = 0; i < q.length; i += 1)\n            sum += q[i];\n        \n        if (sum > w)\n            return false;\n        \n        int i = 0;\n        int j = q.length - 1;\n        while (i < j) {\n            if (q[i] != q[j])   return false;\n            i += 1;\n            j -= 1;\n        }\n        return true;\n    }\n"}
{"bug_id": "FACTORIAL", "buggy_code": "1     public static ArrayList<Integer> factorial(int n) {\n2         ArrayList<Integer> ret = new ArrayList<>();\n3         for(int i = 1; i <= n; i++) {\n4             if((i % 2) == 0) {\n5                 int x = 1;\n6                 for(int j = 1; j <= i; j++) x *= j;\n7                 ret.add(x);\n8             } else {\n9                 int x = 0;\n10                 for(int j = 1; j <= i; i++) x -= j;\n11                 ret.add(x);\n12             }\n13         }\n14         return ret;\n15     }\n", "fixed_code": "    public static ArrayList<Integer> factorial(int n) {\n        ArrayList<Integer> ret = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if((i % 2) == 0) {\n                int x = 1;\n                for(int j = 1; j <= i; j++) x *= j;\n                ret.add(x);\n            } else {\n                int x = 0;\n                for(int j = 1; j <= i; j++) x += j;\n                ret.add(x);\n            }\n        }\n        return ret;\n    }\n"}
{"bug_id": "ORDER_BY_POINTS", "buggy_code": "1     public static Integer[] order_by_points(Integer[] nums) {\n2         ArrayList<Integer> digits = new ArrayList<Integer>();\n3         HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n4 \n5         for (int i = 0; i < nums.length; i += 1){\n6             int neg = 1;\n7             int n = nums[i];\n8             if (n < 0) {\n9                 n = -1 * n;\n10                 neg = -1;\n11             }\n12             int digit = 0;\n13             for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n14                 digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n15             }\n16             digits.add(digit);\n17             if (! digits_number.containsKey(digit))\n18                 digits_number.put(digit, new ArrayList<Integer>());\n19             digits_number.get(digit).add(nums[i]);\n20         }\n21         Collections.sort(digits);\n22         \n23         ArrayList<Integer> result = new ArrayList<Integer>();\n24         for (int i = 0; i < digits.size(); i += 1) {\n25             result.addAll(digits_number.get(digits.get(i)));\n26         }\n27         return result.toArray(new Integer[] {});\n28     }\n", "fixed_code": "    public static Integer[] order_by_points(Integer[] nums) {\n        ArrayList<Integer> digits = new ArrayList<Integer>();\n        HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n\n        for (int i = 0; i < nums.length; i += 1){\n            int neg = 1;\n            int n = nums[i];\n            if (n < 0) {\n                n = -1 * n;\n                neg = -1;\n            }\n            int digit = 0;\n            for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n                if (j == 0)\n                    digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n                else \n                    digit += (n + \"\").toCharArray()[j] - '0';\n            }\n            if (! digits.contains(digit))\n                digits.add(digit);\n            if (! digits_number.containsKey(digit))\n                digits_number.put(digit, new ArrayList<Integer>());\n            digits_number.get(digit).add(nums[i]);\n        }\n        Collections.sort(digits);\n        \n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < digits.size(); i += 1) {\n            result.addAll(digits_number.get(digits.get(i)));\n        }\n        return result.toArray(new Integer[] {});\n    }\n"}
{"bug_id": "GET_ROW", "buggy_code": "1     public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n2         ArrayList<Tuple> result = new ArrayList<Tuple>();\n3 \n4         for (int i = 0; i < lst.size(); i += 1) {\n5             for (int j = lst.get(0).size() - 1; j >= 0; j -= 1){\n6                 if (lst.get(i).get(i) == x){\n7                     result.add(new GET_ROW().new Tuple(i, i));\n8                 }\n9             }\n10         }\n11         return result;\n12     }\n", "fixed_code": "    public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n        ArrayList<Tuple> result = new ArrayList<Tuple>();\n\n        for (int i = 0; i < lst.size(); i += 1) {\n            for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n                if (lst.get(i).get(j) == x){\n                    result.add(new GET_ROW().new Tuple(i, j));\n                }\n            }\n        }\n        return result;\n    }\n"}
{"bug_id": "SPECIAL_FACTORIAL", "buggy_code": "1     public static long special_factorial(long n) {\n2         long fact_i = 1, special_fact = 1;\n3         for(long i = n; i >= 1; i--) {\n4             fact_i *= i * fact_i;\n5             special_fact += i * fact_i;\n6         }\n7         return special_fact;\n8     }\n", "fixed_code": "    public static long special_factorial(long n) {\n        long fact_i = 1, special_fact = 1;\n        for(int i = 1; i <= n; i++) {\n            fact_i *= i;\n            special_fact *= fact_i;\n        }\n        return special_fact;\n    }\n"}
{"bug_id": "DO_ALGEBRA", "buggy_code": "1     public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n2         ScriptEngineManager mgr = new ScriptEngineManager();\n3         ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n4         String expression = \"\";\n5         for (int i = 0; i < operand.length; i += 1) {\n6             expression += operator[i] + operand[i];\n7         }\n8         return Double.parseDouble(engine.eval(expression).toString());\n9     }\n", "fixed_code": "    public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n        ScriptEngineManager mgr = new ScriptEngineManager();\n        ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n        String expression = operand[0] + \"\";\n        for (int i = 0; i < operator.length; i += 1) {\n            expression += operator[i] + operand[i + 1];\n        }\n        return Double.parseDouble(engine.eval(expression).toString());\n    }\n"}
{"bug_id": "MIN_SUBARRAY_SUM", "buggy_code": "1     public static long min_subarray_sum(ArrayList<Long> nums) {\n2         long max_sum = 0;\n3         long s = 0;\n4         for(long num : nums) {\n5             s += num;\n6             if(s < 0) {\n7                 s = 0;\n8             }\n9             max_sum = Math.max(s, max_sum);\n10         }\n11         if(max_sum == 0) {\n12             max_sum = -nums.get(0);\n13             for(int i = 1; i < nums.size(); i++) {\n14                 max_sum = Math.max(max_sum, -nums.get(i));\n15             }\n16         }\n17         long min_sum = -max_sum;\n18         return min_sum;\n19     }\n", "fixed_code": "    public static long min_subarray_sum(ArrayList<Long> nums) {\n        long max_sum = 0;\n        long s = 0;\n        for(long num : nums) {\n            s += -num;\n            if(s < 0) {\n                s = 0;\n            }\n            max_sum = Math.max(s, max_sum);\n        }\n        if(max_sum == 0) {\n            max_sum = -nums.get(0);\n            for(int i = 1; i < nums.size(); i++) {\n                max_sum = Math.max(max_sum, -nums.get(i));\n            }\n        }\n        long min_sum = -max_sum;\n        return min_sum;\n    }\n"}
{"bug_id": "COUNT_NUMS", "buggy_code": "1     public static int count_nums(ArrayList<Integer> arr) {\n2         int count = 0;\n3         for(int num : arr) {\n4             boolean neg = num < 0;\n5             if(neg) num *= 1;\n6             String num_string = Integer.toString(num);\n7             int sum = 0;\n8             for(int i = 0; i < num_string.length(); i++) {\n9                 if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n10                 else sum += num_string.charAt(i) - '0';\n11             }\n12             if(sum > 0) count++;\n13         }\n14         return count;\n15     }\n", "fixed_code": "    public static int count_nums(ArrayList<Integer> arr) {\n        int count = 0;\n        for(int num : arr) {\n            boolean neg = num < 0;\n            if(neg) num *= -1;\n            String num_string = Integer.toString(num);\n            int sum = 0;\n            for(int i = 0; i < num_string.length(); i++) {\n                if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n                else sum += num_string.charAt(i) - '0';\n            }\n            if(sum > 0) count++;\n        }\n        return count;\n    }\n"}
{"bug_id": "GREATEST_COMMON_DIVISOR", "buggy_code": "1     public static int greatest_common_divisor(int a, int b){\n2         while (b > 0) {\n3             a = b;\n4             b = a % b;\n5         }\n6         return a;\n7     }\n", "fixed_code": "    public static int greatest_common_divisor(int a, int b){\n        while (b > 0) {\n            int tmp = a;\n            a = b;\n            b = tmp % b;\n        }\n        return a;\n    }\n"}
{"bug_id": "PRIME_LENGTH", "buggy_code": "1     public static boolean prime_length(String string) {\n2         int l = string.length();\n3         if (l <= 1)\n4             return false;\n5         for (int i = 2; i < l; i += 1) {\n6             if (l - i == 0)\n7                 return false;\n8         }\n9         return true;\n10     }\n", "fixed_code": "    public static boolean prime_length(String string) {\n        int l = string.length();\n        if (l <= 1)\n            return false;\n        for (int i = 2; i < l; i += 1) {\n            if (l % i == 0)\n                return false;\n        }\n        return true;\n    }\n"}
{"bug_id": "SORT_NUMBERS", "buggy_code": "1     public static String sort_numbers(String numbers) {\n2         final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n3         value_map.put(\"zero\", 0);\n4         value_map.put(\"one\", 1);\n5         value_map.put(\"two\", 2);\n6         value_map.put(\"three\", 3);\n7         value_map.put(\"four\", 4);\n8         value_map.put(\"five\", 5);\n9         value_map.put(\"six\", 6);\n10         value_map.put(\"seven\", 7);\n11         value_map.put(\"eight\", 8);\n12         value_map.put(\"nine\", 9);\n13 \n14         ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n15         Collections.sort(number_array);\n16         \n17         String result = \"\";\n18         for (String number : number_array){\n19             result += number + \" \";\n20         }\n21         return result.trim();\n22     }\n", "fixed_code": "    public static String sort_numbers(String numbers) {\n        final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n        value_map.put(\"zero\", 0);\n        value_map.put(\"one\", 1);\n        value_map.put(\"two\", 2);\n        value_map.put(\"three\", 3);\n        value_map.put(\"four\", 4);\n        value_map.put(\"five\", 5);\n        value_map.put(\"six\", 6);\n        value_map.put(\"seven\", 7);\n        value_map.put(\"eight\", 8);\n        value_map.put(\"nine\", 9);\n\n        ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n        Collections.sort(number_array, new Comparator<String>(){\n            public int compare(String n1, String n2) {\n                return value_map.get(n1) - value_map.get(n2);\n            }\n        });\n        \n        String result = \"\";\n        for (String number : number_array){\n            result += number + \" \";\n        }\n        return result.trim();\n    }\n"}
{"bug_id": "REMOVE_DUPLICATES", "buggy_code": "1     public static List<Integer> remove_duplicates(List<Integer> numbers) {\n2         List<Integer> result = new ArrayList<Integer>();\n3         HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n4         \n5         for (Integer n : numbers){\n6             count.put(n, count.get(n) + 1);\n7         }\n8 \n9         for (Integer n : numbers){\n10             if (count.get(n) == 1)\n11                 result.add(n);\n12         }\n13 \n14         return result;\n15     }\n", "fixed_code": "    public static List<Integer> remove_duplicates(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n        \n        for (Integer n : numbers){\n            if (! count.containsKey(n))\n                count.put(n, 0);\n            count.put(n, count.get(n) + 1);\n        }\n\n        for (Integer n : numbers){\n            if (count.get(n) == 1)\n                result.add(n);\n        }\n\n        return result;\n    }\n"}
{"bug_id": "ISCUBE", "buggy_code": "1     public static boolean iscude(int a) {\n2         double root = Math.pow(a, 1./3);\n3         BigDecimal bd = BigDecimal.valueOf(root);\n4         int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n5 \n6         return ((int) Math.pow(round_root, 3)) == a;\n7     }\n", "fixed_code": "    public static boolean iscude(int a) {\n        a = Math.abs(a);\n        double root = Math.pow(a, 1./3);\n        BigDecimal bd = BigDecimal.valueOf(root);\n        int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n\n        return ((int) Math.pow(round_root, 3)) == a;\n    }\n"}
{"bug_id": "MAKE_A_PILE", "buggy_code": "1 \tpublic static ArrayList<Integer> make_a_pile(int n) {\n2 \t\tArrayList<Integer> pile = new ArrayList<Integer>();\n3 \t\tfor(int i = 0; i < n; i++) {\n4 \t\t\tpile.add(n - 2 * i);\n5 \t\t}\n6 \t\treturn pile;\n7 \t}\n", "fixed_code": "\tpublic static ArrayList<Integer> make_a_pile(int n) {\n\t\tArrayList<Integer> pile = new ArrayList<Integer>();\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tpile.add(n + 2 * i);\n\t\t}\n\t\treturn pile;\n\t}\n"}
{"bug_id": "COMMON", "buggy_code": "1     public static int[] common(int[] l1, int[] l2) {\n2         ArrayList<Integer> common = new ArrayList<Integer>();\n3         \n4         for (int i = 0; i < l1.length; i += 1){\n5             for (int j = 0; j < l2.length; j += 1){\n6                 if (l1[i] == l2[j])\n7                     common.add(l1[i]);\n8             }\n9         }\n10         int[] result = new int[common.size()];\n11         int index = 0;\n12         for (Integer c : common) {\n13             result[index] = c;\n14             index += 1;\n15         }\n16         Arrays.sort(result);\n17         return result;\n18     }\n", "fixed_code": "    public static int[] common(int[] l1, int[] l2) {\n        HashSet<Integer> common = new HashSet<Integer>();\n        \n        for (int i = 0; i < l1.length; i += 1){\n            for (int j = 0; j < l2.length; j += 1){\n                if (l1[i] == l2[j])\n                    common.add(l1[i]);\n            }\n        }\n        int[] result = new int[common.size()];\n        int index = 0;\n        for (Integer c : common) {\n            result[index] = c;\n            index += 1;\n        }\n        Arrays.sort(result);\n        return result;\n    }\n"}
{"bug_id": "MULTIPLY", "buggy_code": "1     public static int multiply(int a, int b) {\n2         return (a % 10) * (b % 10);\n3     }\n", "fixed_code": "    public static int multiply(int a, int b) {\n        return Math.abs(a % 10) * Math.abs(b % 10);\n    }\n"}
{"bug_id": "TRI", "buggy_code": "1     public static int[] tri(int n) {\n2         int[] sequence = new int[n + 1];\n3         if(n == 0) {\n4             sequence[0] = 1;\n5             return sequence;\n6         }\n7         sequence[0] = 1;\n8         sequence[1] = -3;\n9         for(int i = 2; i < n - 1; i--) {\n10             if(i % 2 == 0) sequence[i] = i / 2 - 1;\n11             else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n12         }\n13         return sequence;\n14 \n15     }\n", "fixed_code": "    public static int[] tri(int n) {\n        int[] sequence = new int[n + 1];\n        if(n == 0) {\n            sequence[0] = 1;\n            return sequence;\n        }\n        sequence[0] = 1;\n        sequence[1] = 3;\n        for(int i = 2; i < n + 1; i++) {\n            if(i % 2 == 0) sequence[i] = i / 2 + 1;\n            else sequence[i] = sequence[i - 1] + sequence[i - 2] + (i + 3) / 2;\n        }\n        return sequence;\n\n    }\n"}
{"bug_id": "INTERSPERSE", "buggy_code": "1     public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n2         List<Integer> result = new ArrayList<Integer>();\n3 \n4         if (numbers.size() == 0)\n5             return result;\n6         \n7         for (int i = 0; i < numbers.size(); i += 1) {\n8             result.add(numbers.get(i));\n9             result.add(delimeter);\n10         }\n11         result.add(numbers.get(numbers.size() - 1));\n12         return result;\n13     }\n", "fixed_code": "    public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        if (numbers.size() == 0)\n            return result;\n        \n        for (int i = 0; i < numbers.size() - 1; i += 1) {\n            result.add(numbers.get(i));\n            result.add(delimeter);\n        }\n        result.add(numbers.get(numbers.size() - 1));\n        return result;\n    }\n"}
{"bug_id": "SELECT_WORDS", "buggy_code": "1     public static ArrayList<String> select_words(String s, int n) {\n2         ArrayList<String> result = new ArrayList<>();\n3         String[] words = s.split(\" \");\n4         for(int i = 0; i < words.length; i++) {\n5             int num_consonants = 0;\n6             char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n7             for(int j = 0; j < words[i].length(); j++) {\n8                 boolean consonant = true;\n9                 for(int k = 0; k < vowels.length; k++) {\n10                     if(vowels[k] == words[i].charAt(j)) {\n11                         consonant = false;\n12                         break;\n13                     }\n14                 }\n15                 if(consonant) num_consonants++;\n16             }\n17             if(num_consonants == n) result.add(words[i]);\n18         }\n19         return result;\n20     }\n", "fixed_code": "    public static ArrayList<String> select_words(String s, int n) {\n        ArrayList<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for(int i = 0; i < words.length; i++) {\n            int num_consonants = 0;\n            char[] vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n            for(int j = 0; j < words[i].length(); j++) {\n                boolean consonant = true;\n                for(int k = 0; k < vowels.length; k++) {\n                    if(vowels[k] == words[i].charAt(j)) {\n                        consonant = false;\n                        break;\n                    }\n                }\n                if(consonant) num_consonants++;\n            }\n            if(num_consonants == n) result.add(words[i]);\n        }\n        return result;\n    }\n"}
{"bug_id": "SIMPLIFY", "buggy_code": "1     public static boolean simplify(String x, String n) {\n2         int a = Integer.parseInt(x.split(\"/\")[0]);\n3         int b = Integer.parseInt(x.split(\"/\")[1]);\n4         int c = Integer.parseInt(n.split(\"/\")[0]);\n5         int d = Integer.parseInt(n.split(\"/\")[1]);\n6 \n7         int numerator = a * c;\n8         int denom = b * d;\n9         if (numerator / denom == (int) (numerator / denom))\n10             return true;\n11         return false;\n12     }\n", "fixed_code": "    public static boolean simplify(String x, String n) {\n        int a = Integer.parseInt(x.split(\"/\")[0]);\n        int b = Integer.parseInt(x.split(\"/\")[1]);\n        int c = Integer.parseInt(n.split(\"/\")[0]);\n        int d = Integer.parseInt(n.split(\"/\")[1]);\n\n        int numerator = a * c;\n        int denom = b * d;\n        if (1.0 * numerator / denom == (int) (numerator / denom))\n            return true;\n        return false;\n    }\n"}
{"bug_id": "COMPARE", "buggy_code": "1     public static int[] compare(int[] game, int[] guess) {\n2         int[] result = new int[game.length];\n3 \n4         for (int i = 0; i < game.length; i += 1) {\n5             result[i] = Math.floorDiv(game[i], guess[i]);\n6         }\n7 \n8         return result;\n9     }\n", "fixed_code": "    public static int[] compare(int[] game, int[] guess) {\n        int[] result = new int[game.length];\n\n        for (int i = 0; i < game.length; i += 1) {\n            result[i] = Math.abs(game[i] - guess[i]);\n        }\n\n        return result;\n    }\n"}
{"bug_id": "IS_MULTIPLY_PRIME", "buggy_code": "1     public static boolean is_multiply_prime(int a) {\n2         for (int i = 2; i < a; i += 1){\n3             if (! is_prime(i)) continue;\n4             for (int j = i; j < a; j += 1) {\n5                 for (int k = j; k < a; j += 1) {\n6                     if (! is_prime(k)) continue;\n7                     if (i * j * k == a)\n8                         return true;\n9                 }\n10             }\n11         }\n12         return false;\n13     }\n", "fixed_code": "    public static boolean is_multiply_prime(int a) {\n        for (int i = 2; i < a; i += 1){\n            if (! is_prime(i)) continue;\n            for (int j = i; j < a; j += 1) {\n                if (! is_prime(j)) continue;\n                for (int k = j; k < a; k += 1) {\n                    if (! is_prime(k)) continue;\n                    if (i * j * k == a)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n"}
{"bug_id": "EXCHANGE", "buggy_code": "1     public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n2         int odd = 0, even = 0;\n3         for(int i : lst2) {\n4             if((i % 2) == 1) even++;\n5         }\n6         for(int i : lst2) {\n7             if((i % 2) == 0) even++;\n8         }\n9         if(even >= odd) {\n10             return \"YES\";\n11         }\n12         return \"NO\";\n13     }\n", "fixed_code": "    public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n        int odd = 0, even = 0;\n        for(int i : lst1) {\n            if((i % 2) == 1) odd++;\n        }\n        for(int i : lst2) {\n            if((i % 2) == 0) even++;\n        }\n        if(even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n"}
{"bug_id": "SUM_SQUARES", "buggy_code": "1     public static int sum_squares(int[] lst) {\n2         int result = 0;\n3 \n4         for (int i = 0; i < lst.length; i += 1){\n5             if (i % 4 == 0)\n6                 result += lst[i] * lst[i];\n7             else if (i % 3 == 0)\n8                 result += lst[i] * lst[i] * lst[i];\n9             else result += lst[i];\n10         }\n11         return result;\n12     }\n", "fixed_code": "    public static int sum_squares(int[] lst) {\n        int result = 0;\n\n        for (int i = 0; i < lst.length; i += 1){\n            if (i % 3 == 0)\n                result += lst[i] * lst[i];\n            else if (i % 4 == 0)\n                result += lst[i] * lst[i] * lst[i];\n            else result += lst[i];\n        }\n        return result;\n    }\n"}
{"bug_id": "CHANGE_BASE", "buggy_code": "1     public static String change_base(int x, int base) {\n2         String result = \"\";\n3 \n4         while (x > 0) {\n5             result = result + x % base;\n6             x = x - x / base;\n7         }\n8         return result;\n9     }\n", "fixed_code": "    public static String change_base(int x, int base) {\n        String result = \"\";\n\n        while (x > 0) {\n            result = (x % base) + result;\n            x = (int) x / base;\n        }\n        return result;\n    }\n"}
{"bug_id": "ENCODE", "buggy_code": "1     public static String encode(String message) {\n2         StringBuilder sb = new StringBuilder();\n3         for (char c : message.toCharArray()) {\n4             if (Character.isUpperCase(c)) {\n5                 c = Character.toLowerCase(c);\n6             }\n7             if (Character.isLowerCase(c)) {\n8                 c = Character.toUpperCase(c);\n9             }\n10             if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n11                     || c == 'U') {\n12                 c = (char) ((int) c + 2);\n13             }\n14             sb.append(c);\n15         }\n16         return sb.toString();\n17     }\n", "fixed_code": "    public static String encode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n            } \n            else if (Character.isLowerCase(c)) {\n                c = Character.toUpperCase(c);\n            }\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                    || c == 'U') {\n                c = (char) ((int) c + 2);\n            }\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n"}
{"bug_id": "SOLVE", "buggy_code": "1     public static String solve(int N) {\n2         int sum = 0;\n3         for (int i = 0; i < (N + \"\").length(); i += 1){\n4             sum += Integer.parseInt((N + \"\").substring(i + 1));\n5         }\n6         return Integer.toBinaryString(sum);\n7     }\n", "fixed_code": "    public static String solve(int N) {\n        int sum = 0;\n        for (int i = 0; i < (N + \"\").length(); i += 1){\n            sum += Integer.parseInt((N + \"\").substring(i, i + 1));\n        }\n        return Integer.toBinaryString(sum);\n    }\n"}
{"bug_id": "PRIME_FIB", "buggy_code": "1     public static int prime_fib(int n){\n2         ArrayList<Integer> fib = new ArrayList<Integer>();\n3         fib.add(0);\n4         fib.add(1);\n5 \n6         while (true) {\n7             int len = fib.size();\n8             fib.add(fib.get(len - 1) + fib.get(len));\n9             if (is_prime(fib.get(len - 1)))\n10                 n -= 1;\n11             if (n == 0)\n12                 return fib.get(fib.size() - 1);\n13         }\n14     }\n", "fixed_code": "    public static int prime_fib(int n){\n        ArrayList<Integer> fib = new ArrayList<Integer>();\n        fib.add(0);\n        fib.add(1);\n\n        while (true) {\n            int len = fib.size();\n            fib.add(fib.get(len - 1) + fib.get(len - 2));\n            if (is_prime(fib.get(fib.size() - 1)))\n                n -= 1;\n            if (n == 0)\n                return fib.get(fib.size() - 1);\n        }\n    }\n"}
{"bug_id": "FIZZ_BUZZ", "buggy_code": "1     public static int fizz_buzz(int n) {\n2         int result = 0;\n3 \n4         for (int i = 0; i < n; i += 1){\n5             if (i % 11 == 0 || i % 13 == 0) {\n6                 for (int j = 0; j < i + \"\".length(); j += 1){\n7                     if (i + \"\".substring(j, j + 1) == \"7\")\n8                         result += 1;\n9                 }\n10             }\n11         }\n12         return result;\n13     }\n", "fixed_code": "    public static int fizz_buzz(int n) {\n        int result = 0;\n\n        for (int i = 0; i < n; i += 1){\n            if (i % 11 == 0 || i % 13 == 0) {\n                for (int j = 0; j < (i + \"\").length(); j += 1){\n                    if ((i + \"\").substring(j, j + 1).equals(\"7\"))\n                        result += 1;\n                }\n            }\n        }\n        return result;\n    }\n"}
{"bug_id": "FILTER_BY_SUBSTRING", "buggy_code": "1     public static List<String> filter_by_substring(List<String> strings, String substring) {\n2         List<String> result = new ArrayList<String>();\n3         for (String string : strings){\n4             result.add(string);\n5         }\n6         return result;\n7     }\n", "fixed_code": "    public static List<String> filter_by_substring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<String>();\n        for (String string : strings){\n            if (string.contains(substring)){\n                result.add(string);\n            }\n        }\n        return result;\n    }\n"}
{"bug_id": "REVERSE_DELETE", "buggy_code": "1     public static ArrayList<Object> reverse_delete(String s, String c) {\n2         String new_s = \"\";\n3         for(int i = 0; i < s.length(); i++) {\n4             if(c.indexOf(s.charAt(i)) != -1) {\n5                 new_s += s.charAt(i);\n6             }\n7         }\n8         String reverse_s = \"\";\n9         for(int i = new_s.length() - 1; i >= 0; i--) {\n10             reverse_s += new_s.charAt(i);\n11         }\n12         ArrayList<Object> res = new ArrayList<>();\n13         res.add(new_s);\n14         res.add(reverse_s.equals(new_s));\n15         return res;\n16     }\n", "fixed_code": "    public static ArrayList<Object> reverse_delete(String s, String c) {\n        String new_s = \"\";\n        for(int i = 0; i < s.length(); i++) {\n            if(c.indexOf(s.charAt(i)) == -1) {\n                new_s += s.charAt(i);\n            }\n        }\n        String reverse_s = \"\";\n        for(int i = new_s.length() - 1; i >= 0; i--) {\n            reverse_s += new_s.charAt(i);\n        }\n        ArrayList<Object> res = new ArrayList<>();\n        res.add(new_s);\n        res.add(reverse_s.equals(new_s));\n        return res;\n    }\n"}
{"bug_id": "CAR_RACE_COLLISION", "buggy_code": "1     public static int car_race_collision(int n) {\n2         return n;\n3     }\n", "fixed_code": "    public static int car_race_collision(int n) {\n        return n * n;\n    }\n"}
{"bug_id": "NUMERICAL_LETTER_GRADE", "buggy_code": "1     public static String[] numerical_letter_grade(double[] grades) {\n2         String[] letter_grade = new String[grades.length];\n3 \n4         for (int i = 0; i < grades.length; i += 1) {\n5             double gpa = grades[i];\n6             if (gpa == 4.0)\n7                 letter_grade[i] = \"A+\";\n8             else if (gpa > 3.7)\n9                 letter_grade[i] = \"A\";\n10             else if (gpa > 3.3)\n11                 letter_grade[i] = \"A-\";\n12             else if (gpa > 3.0)\n13                 letter_grade[i] = \"B+\";\n14             else if (gpa > 2.7)\n15                 letter_grade[i] = \"B\";\n16             else if (gpa > 2.3)\n17                 letter_grade[i] = \"B-\";\n18             else if (gpa > 2.0)\n19                 letter_grade[i] = \"C+\";\n20             else if (gpa > 1.3)\n21                 letter_grade[i] = \"C-\";\n22             else if (gpa > 1.0)\n23                 letter_grade[i] = \"D+\";\n24             else if (gpa > 1.7)\n25                 letter_grade[i] = \"C\";\n26             else if (gpa > 0.7)\n27                 letter_grade[i] = \"D\";\n28             else if (gpa > 0.0)\n29                 letter_grade[i] = \"D-\";\n30             else\n31                 letter_grade[i] = \"E\";\n32         }\n33         return letter_grade;\n34     }\n", "fixed_code": "    public static String[] numerical_letter_grade(double[] grades) {\n        String[] letter_grade = new String[grades.length];\n\n        for (int i = 0; i < grades.length; i += 1) {\n            double gpa = grades[i];\n            if (gpa == 4.0)\n                letter_grade[i] = \"A+\";\n            else if (gpa > 3.7)\n                letter_grade[i] = \"A\";\n            else if (gpa > 3.3)\n                letter_grade[i] = \"A-\";\n            else if (gpa > 3.0)\n                letter_grade[i] = \"B+\";\n            else if (gpa > 2.7)\n                letter_grade[i] = \"B\";\n            else if (gpa > 2.3)\n                letter_grade[i] = \"B-\";\n            else if (gpa > 2.0)\n                letter_grade[i] = \"C+\";\n            else if (gpa > 1.7)\n                letter_grade[i] = \"C\";\n            else if (gpa > 1.3)\n                letter_grade[i] = \"C-\";\n            else if (gpa > 1.0)\n                letter_grade[i] = \"D+\";\n            else if (gpa > 0.7)\n                letter_grade[i] = \"D\";\n            else if (gpa > 0.0)\n                letter_grade[i] = \"D-\";\n            else\n                letter_grade[i] = \"E\";\n        }\n        return letter_grade;\n    }\n"}
{"bug_id": "ODD_COUNT", "buggy_code": "1     public static ArrayList<String> odd_count(ArrayList<String> lst) {\n2         ArrayList<String> result = new ArrayList<>();\n3         for(String s : lst) {\n4             int n = 0;\n5             for(int i = 0; i < s.length(); i++) {\n6                 int digit = s.charAt(i) - '0';\n7                 if(digit % 2 == 0) {\n8                     n--;\n9                 }\n10             }\n11             result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n12         }\n13         return result;\n14     }\n", "fixed_code": "    public static ArrayList<String> odd_count(ArrayList<String> lst) {\n        ArrayList<String> result = new ArrayList<>();\n        for(String s : lst) {\n            int n = 0;\n            for(int i = 0; i < s.length(); i++) {\n                int digit = s.charAt(i) - '0';\n                if(digit % 2 == 1) {\n                    n++;\n                }\n            }\n            result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n        }\n        return result;\n    }\n"}
{"bug_id": "HEX_KEY", "buggy_code": "1     public static int hex_key(String num) {\n2         int result = 0;\n3         for (char c : num.toCharArray()) {\n4             if (c == '2' || c == '3' || c == '5' || c == '7')\n5                 result += 1;\n6         }\n7         return result;\n8     }\n", "fixed_code": "    public static int hex_key(String num) {\n        int result = 0;\n        for (char c : num.toCharArray()) {\n            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\n                result += 1;\n        }\n        return result;\n    }\n"}
{"bug_id": "CORRECT_BRACKETING", "buggy_code": "1     public static boolean correct_bracketing(String brackets) {\n2         int depth = 0;\n3         for (char b : brackets.toCharArray()) {\n4             if (b == '<')\n5                 depth += 1;\n6             else\n7                 depth -= 1;\n8             if (depth >= 0)\n9                 return true;\n10         }\n11         return false;\n12     }\n", "fixed_code": "    public static boolean correct_bracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<')\n                depth += 1;\n            else\n                depth -= 1;\n            if (depth < 0)\n                return false;\n        }\n        return depth == 0;\n    }\n"}
{"bug_id": "GET_ODD_COLLATZ", "buggy_code": "1     public static ArrayList<Integer> get_odd_collatz(int n) {\n2         ArrayList<Integer> result = new ArrayList<>();\n3         if((n % 2) == 1) result.add(n);\n4         while(n >= 1) {\n5             if((n % 2) == 1) n /= 2;\n6             else n = 3 * n + 1;\n7             if((n % 2) == 1) result.add(n);\n8         }\n9         Collections.sort(result);\n10         return result;\n11     }\n", "fixed_code": "    public static ArrayList<Integer> get_odd_collatz(int n) {\n        ArrayList<Integer> result = new ArrayList<>();\n        if((n % 2) == 1) result.add(n);\n        while(n > 1) {\n            if((n % 2) == 0) n /= 2;\n            else n = 3 * n + 1;\n            if((n % 2) == 1) result.add(n);\n        }\n        Collections.sort(result);\n        return result;\n    }\n"}
{"bug_id": "TRIANGLE_AREA_2", "buggy_code": "1     public static double triangle_area_2(double a, double b, double c) {\n2         if (a + b <= c || a + c <= b || b + c <= a)\n3             return -1;\n4         \n5         double s = (a + b + c) / 2.;\n6         double result = Math.pow(s, 0.5);\n7         \n8         BigDecimal bd = BigDecimal.valueOf(result);\n9         bd = bd.setScale(2, RoundingMode.HALF_UP);\n10         return bd.doubleValue();\n11     }\n", "fixed_code": "    public static double triangle_area_2(double a, double b, double c) {\n        if (a + b <= c || a + c <= b || b + c <= a)\n            return -1;\n        \n        double s = (a + b + c) / 2.;\n        double result = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n        \n        BigDecimal bd = BigDecimal.valueOf(result);\n        bd = bd.setScale(2, RoundingMode.HALF_UP);\n        return bd.doubleValue();\n    }\n"}
{"bug_id": "STRANGE_SORT_LIST", "buggy_code": "1     public static List<Integer> strange_sort_list(List<Integer> lst) {\n2         List<Integer> result = new ArrayList<Integer>();\n3 \n4         boolean switched = true;\n5         while (lst.size() > 0) {\n6             if (switched) {\n7                 result.add(Collections.min(lst));\n8             } else {\n9                 result.add(Collections.max(lst));\n10             }\n11         }\n12         return result;\n13     }\n", "fixed_code": "    public static List<Integer> strange_sort_list(List<Integer> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n\n        boolean switched = true;\n        while (lst.size() > 0) {\n            if (switched) {\n                result.add(Collections.min(lst));\n            } else {\n                result.add(Collections.max(lst));\n            }\n            lst.remove(result.get(result.size() - 1));\n            switched = (! switched);\n        }\n        return result;\n    }\n"}
{"bug_id": "TRIANGLE_AREA", "buggy_code": "1     public static double triangle_area(double a, double h) {\n2         return a * h;\n3     }\n", "fixed_code": "    public static double triangle_area(double a, double h) {\n        return a * h / 2.;\n    }\n"}
{"bug_id": "FIB4", "buggy_code": "1     public static int fib4(int n) {\n2         ArrayList<Integer> result = new ArrayList<Integer>(); \n3         result.add(0);\n4         result.add(0);\n5         result.add(2);\n6         result.add(0);\n7 \n8         if (n < 4)\n9             return result.get(n);\n10         for (int i = 4; i < n + 1; i += 1) {\n11             result.add(\n12                 result.get(0) + result.get(1) + result.get(2) + result.get(3)\n13             );\n14         }\n15         return result.get(result.size() - 1);\n16     }\n", "fixed_code": "    public static int fib4(int n) {\n        ArrayList<Integer> result = new ArrayList<Integer>(); \n        result.add(0);\n        result.add(0);\n        result.add(2);\n        result.add(0);\n\n        if (n < 4)\n            return result.get(n);\n        for (int i = 4; i < n + 1; i += 1) {\n            result.add(\n                result.get(0) + result.get(1) + result.get(2) + result.get(3)\n            );\n            result.remove(0);\n        }\n        return result.get(result.size() - 1);\n    }\n"}
{"bug_id": "CHECK_IF_LAST_CHAR_IS_A_LETTER", "buggy_code": "1     public static boolean check_if_last_char_is_a_letter(String txt) {\n2         String[] parts = txt.split(\" \");\n3         String last = \" \";\n4         last = parts[parts.length - 1];\n5         if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n6         if(txt.length() == 1) last = \" \";\n7         int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n8         return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n9     }\n", "fixed_code": "    public static boolean check_if_last_char_is_a_letter(String txt) {\n        String[] parts = txt.split(\" \");\n        String last = \" \";\n        if(parts.length != 0) last = parts[parts.length - 1];\n        if(txt.length() != 0 && txt.charAt(txt.length() - 1) == ' ') last = \" \";\n        if(txt.length() == 0) last = \" \";\n        int last_char_pos = Character.toLowerCase(last.charAt(0)) - 'a';\n        return (last.length() == 1) && (0 <= last_char_pos && last_char_pos <= 25);\n    }\n"}
{"bug_id": "IS_PRIME", "buggy_code": "1     public static boolean is_prime(int n){\n2         if (n < 2)\n3             return false;\n4         for (int k = 0; k < n; k += 1){\n5             if (n % k == 0)\n6                 return false;\n7         }\n8         return true;\n9     }\n", "fixed_code": "    public static boolean is_prime(int n){\n        if (n < 2)\n            return false;\n        for (int k = 2; k < n - 1; k += 1){\n            if (n % k == 0)\n                return false;\n        }\n        return true;\n    }\n"}
{"bug_id": "GENERATE_INTEGERS", "buggy_code": "1     public static ArrayList<Integer> generate_integers(int a, int b) {\n2         int lower = Math.max(2, a);\n3         int upper = Math.min(8, b);\n4 \n5         ArrayList<Integer> result = new ArrayList<Integer>();\n6         for (int i = lower; i <= upper; i += 1) {\n7             if (i % 2 == 0) result.add(i);\n8         }\n9         return result;\n10     }\n", "fixed_code": "    public static ArrayList<Integer> generate_integers(int a, int b) {\n        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int i = lower; i <= upper; i += 1) {\n            if (i % 2 == 0) result.add(i);\n        }\n        return result;\n    }\n"}
{"bug_id": "REMOVE_VOWELS", "buggy_code": "1     public static String remove_vowels(String string) {\n2         StringBuilder sb = new StringBuilder();\n3         for (char c : string.toCharArray()) {\n4             if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n5                 continue;\n6             sb.append(c);\n7         }\n8         return sb.toString();\n9     }\n", "fixed_code": "    public static String remove_vowels(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n            char c_lower = Character.toLowerCase(c);\n            if (c_lower == 'a' || c_lower == 'e' || c_lower == 'i' || c_lower == 'o' || c_lower == 'u')\n                continue;\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n"}
{"bug_id": "PROD_SIGNS", "buggy_code": "1     public static int prod_signs(int[] arr) {\n2         if(arr.length == 0) return -10;\n3         int prod = 1;\n4         for(int i = 0; i < arr.length; i++) {\n5             if(arr[i] == 0) prod = 0;\n6             else if(arr[i] > 0) prod *= 1;\n7         }\n8         int sum = 0;\n9         for(int i = 0; i < arr.length; i++) {\n10             sum += Math.abs(arr[i]);\n11         }\n12         return prod * sum;\n13     }\n", "fixed_code": "    public static int prod_signs(int[] arr) {\n        if(arr.length == 0) return -10;\n        int prod = 1;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 0) prod = 0;\n            else if(arr[i] < 0) prod *= -1;\n        }\n        int sum = 0;\n        for(int i = 0; i < arr.length; i++) {\n            sum += Math.abs(arr[i]);\n        }\n        return prod * sum;\n    }\n"}
{"bug_id": "PARSE_MUSIC", "buggy_code": "1     public static List<Integer> parse_music(String music_string) {\n2         HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n3         note_map.put(\"o\", 4);\n4         note_map.put(\"o|\", 2);\n5         note_map.put(\".|\", 1);\n6 \n7         List<Integer> result = new ArrayList<Integer>();\n8 \n9         for (String note : music_string.split(\" \")){\n10             result.add(note_map.get(note));\n11         }\n12         return result;\n13     }\n", "fixed_code": "    public static List<Integer> parse_music(String music_string) {\n        HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n        note_map.put(\"o\", 4);\n        note_map.put(\"o|\", 2);\n        note_map.put(\".|\", 1);\n\n        List<Integer> result = new ArrayList<Integer>();\n\n        if (music_string.trim().equals(\"\"))\n            return result;\n        for (String note : music_string.split(\" \")){\n            result.add(note_map.get(note));\n        }\n        return result;\n    }\n"}
{"bug_id": "SOLVE_STRING", "buggy_code": "1     public static String solve_string(String s) {\n2         int flg = 0;\n3         StringBuilder sb = new StringBuilder();\n4         for (char c : s.toCharArray()) {\n5             if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n6             else sb.append(Character.toLowerCase(c));\n7             flg = 1;\n8         }\n9         if (flg == 0) {\n10             sb = new StringBuilder();\n11             for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n12         }\n13         return sb.toString();\n14     }\n", "fixed_code": "    public static String solve_string(String s) {\n        int flg = 0;\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isAlphabetic(c)){\n                if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n                else sb.append(Character.toLowerCase(c));\n                flg = 1;\n            }\n            else sb.append(c);\n        }\n        if (flg == 0) {\n            sb = new StringBuilder();\n            for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n        }\n        return sb.toString();\n    }\n"}
